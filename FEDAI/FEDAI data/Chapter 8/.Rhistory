Z <- as.integer(rindb$happyface) - 1   # generate a treatment indicator
Y <- rindb$tip
probs <- genprobexact(Z)
ate <- estate(Y,Z,prob=probs)
numiter <- 10000
perms <- genperms(Z,maxiter=numiter)
Ys <- genouts(Y,Z,ate=ate)            # generate a schedule of potential outcomes under the assumption that the treatment effect equals the estimated ATE for all subjects
testvar <- var(Y[Z==1]) - var(Y[Z==0])
# compare variances in treatment and control groups
vardist <- rep(NA,numiter)
for (i in 1:numiter)
vardist[i] <- var(Y[perms[,i]==1]) - var(Y[perms[,i]==0])
mean(vardist >= testvar)           # p-value for var(Y1)>Var(Y0)
mean(abs(vardist) >= abs(testvar)) # p-value for var(Y1)<>Var(Y0)
Ys # schedule of Potential Outcomes
female <- as.integer(rindb$female) - 1   # generate a treatment indicators of waitstaff sex
lmmodelint <- lm(Y~Z*female)      # regression with interaction between happyface and waitstaff sex
summary(lmmodelint)
lmmodel <- lm(Y~Z+female)    # regression model without interaction
# use estimated coefficients from base model to impute potential outcomes
Y00 <- Y - lmmodel$coefficients["Z"]*Z - lmmodel$coefficients["female"]*female
Y10 <- Y00 + lmmodel$coefficients["Z"]
Y01 <- Y00 + lmmodel$coefficients["female"]
Y11 <- Y00 + lmmodel$coefficients["Z"] + lmmodel$coefficients["female"]
Zstat <- Z*10 + female
# calculate the F-statistic by comparing two nested models
ftest <- lmtest::waldtest(lmmodelint,lmmodel)$F[2]
flist <- rep(NA,numiter)
N <- length(Z)
for (i in 1:numiter) {
Zstatri <- sample(Zstat)   # sample from the set of observed set of single or combined treatments
# realized values of Y reflect single or compound treatments and
# the potential outcomes that they reveal
Yri <- Y00
Yri[Zstatri == 10] <- Y10[Zstatri == 10]
Yri[Zstatri == 1] <- Y01[Zstatri == 1]
Yri[Zstatri == 11] <- Y11[Zstatri == 11]
# adjust the simulated variables Z and female to reflect the assignments above
Zri <- femaleri <- rep(0,N)
Zri[Zstatri == 10 | Zstatri == 11] <- 1
femaleri[Zstatri == 1 | Zstatri == 11] <- 1
# regressions based on two nested models: with and without interaction
lmmodelintri <- lm(Y~Zri*femaleri)
lmmodelri <- lm(Y~Zri+femaleri)
# calculate the F-statistic by comparing two nested models
flist[i] <- lmtest::waldtest(lmmodelintri,lmmodelri)$F[2]
}
mean(flist >= ftest)   # calculate the p-value by comparing the observed F-statistic to the F-statistic under the null of constant & additive effects
setwd("~/MA/2019Spring/RA/FEDAI data/Chapter 9")
rm(list=ls())       # clear objects in memory
library(ri)         # load the RI package
set.seed(123908)   # random number seed, so that results are reproducible
setwd("~/16Spring/4368 Experimental/4.FEDAI replication/Chapter 9")
library(foreign)    # package allows R to read Stata datasets
rindb <- read.dta("Rind_Bordia_JASP_1996.dta")
function (..., list = character(), pos = -1, envir = as.environment(pos),
inherits = FALSE)
table()
table(rindb$happyface)
head(rindb)  # show a snippet of the data
Z <- as.integer(rindb$happyface) - 1   # generate a treatment indicator
table(Z)
mean(Z)
mean(rindb$female)
mean(rindb$female, na.rm = T)
table(rindb$female)
probs <- genprobexact(Z)
ate <- estate(Y,Z,prob=probs)
Y <- rindb$tip
probs <- genprobexact(Z)
ate <- estate(Y,Z,prob=probs)
numiter <- 10000
perms <- genperms(Z,maxiter=numiter)
Ys <- genouts(Y,Z,ate=ate)            # generate a schedule of potential outcomes under the assumption that the treatment effect equals the estimated ATE for all subjects
testvar <- var(Y[Z==1]) - var(Y[Z==0])
# compare variances in treatment and control groups
vardist <- rep(NA,numiter)
for (i in 1:numiter)
vardist[i] <- var(Y[perms[,i]==1]) - var(Y[perms[,i]==0])
mean(vardist >= testvar)           # p-value for var(Y1)>Var(Y0)
mean(abs(vardist) >= abs(testvar)) # p-value for var(Y1)<>Var(Y0)
Ys # schedule of Potential Outcomes
female <- as.integer(rindb$female) - 1   # generate a treatment indicators of waitstaff sex
table(female)
# calculate the F-statistic by comparing two nested models
ftest <- lmtest::waldtest(lmmodelint,lmmodel)$F[2]
for (i in 1:numiter)
for (i in 1:numiter)
vardist[i] <- var(Y[perms[,i]==1]) - var(Y[perms[,i]==0])
rm(list=ls())       # clear objects in memory
setwd("~/MA/2019Spring/RA/FEDAI data/Chapter 9")
library(ri)         # load the RI package
set.seed(123908)   # random number seed, so that results are reproducible
setwd("~/16Spring/4368 Experimental/4.FEDAI replication/Chapter 9")
library(foreign)    # package allows R to read Stata datasets
rindb <- read.dta("Rind_Bordia_JASP_1996.dta")
head(rindb)  # show a snippet of the data
Z <- as.integer(rindb$happyface) - 1   # generate a treatment indicator
Y <- rindb$tip
probs <- genprobexact(Z)
ate <- estate(Y,Z,prob=probs)
numiter <- 10000
perms <- genperms(Z,maxiter=numiter)
Ys <- genouts(Y,Z,ate=ate)            # generate a schedule of potential outcomes under the assumption that the treatment effect equals the estimated ATE for all subjects
testvar <- var(Y[Z==1]) - var(Y[Z==0])
# compare variances in treatment and control groups
vardist <- rep(NA,numiter)
for (i in 1:numiter)
vardist[i] <- var(Y[perms[,i]==1]) - var(Y[perms[,i]==0])
mean(vardist >= testvar)           # p-value for var(Y1)>Var(Y0)
mean(abs(vardist) >= abs(testvar)) # p-value for var(Y1)<>Var(Y0)
female <- as.integer(rindb$female) - 1   # generate a treatment indicators of waitstaff sex
lmmodelint <- lm(Y~Z*female)      # regression with interaction between happyface and waitstaff sex
summary(lmmodelint)
lmmodel <- lm(Y~Z+female)
Y0 <- Y - lmmodel$coefficients["Z"] * Z
Y1 <- Y + lmmodel$coefficients["Z"] * (1 - Z)
f.obs <- waldtest(lmmodelint, lmmodel)$F[2]
f.sims <- rep(NA,numiter)
for (i in 1:numiter) {
Z.sim <- perms[,i]
Y.sim <- Y1 * Z.sim + Y0 * (1 - Z.sim)
# regressions based on two nested models: with and without interaction
lmmodelint.sim <- lm(Y.sim ~ Z.sim + female + female * Z.sim)
lmmodel.sim <- lm(Y.sim ~ Z.sim + female)
# calculate the F-statistic by comparing two nested models
f.sims[i] <- waldtest(lmmodelint.sim, lmmodel.sim)$F[2]
}
# use estimated coefficients from base model to impute potential outcomes
Y00 <- Y - lmmodel$coefficients["Z"]*Z - lmmodel$coefficients["female"]*female
mean(f.sims >= f.obs)
lmmodel <- lm(Y~Z+female)
Y0 <- Y - lmmodel$coefficients["Z"] * Z
Y1 <- Y + lmmodel$coefficients["Z"] * (1 - Z)
f.obs <- waldtest(lmmodelint, lmmodel)$F[2]
f.sims <- rep(NA,numiter)
for (i in 1:numiter) {
Z.sim <- perms[,i]
Y.sim <- Y1 * Z.sim + Y0 * (1 - Z.sim)
# regressions based on two nested models: with and without interaction
lmmodelint.sim <- lm(Y.sim ~ Z.sim + female + female * Z.sim)
lmmodel.sim <- lm(Y.sim ~ Z.sim + female)
# calculate the F-statistic by comparing two nested models
f.sims[i] <- waldtest(lmmodelint.sim, lmmodel.sim)$F[2]
}
Y0 <- Y - lmmodel$coefficients["Z"] * Z
Y1 <- Y + lmmodel$coefficients["Z"] * (1 - Z)
f.obs <- lmtest::waldtest(lmmodelint, lmmodel)$F[2]
f.sims <- rep(NA,numiter)
for (i in 1:numiter) {
Z.sim <- perms[,i]
Y.sim <- Y1 * Z.sim + Y0 * (1 - Z.sim)
# regressions based on two nested models: with and without interaction
lmmodelint.sim <- lm(Y.sim ~ Z.sim + female + female * Z.sim)
lmmodel.sim <- lm(Y.sim ~ Z.sim + female)
# calculate the F-statistic by comparing two nested models
f.sims[i] <- lmtest::waldtest(lmmodelint.sim, lmmodel.sim)$F[2]
}
mean(f.sims >= f.obs)
set.seed(892379)   # random number seed, so that results are reproducible
Z <- as.integer(rindb$happyface) - 1   # generate a treatment indicator
Y <- rindb$tip
probs <- genprobexact(Z)
ate <- estate(Y,Z,prob=probs)
numiter <- 10000
perms <- genperms(Z,maxiter=numiter)
Ys <- genouts(Y,Z,ate=ate)            # generate a schedule of potential outcomes under the assumption that the treatment effect equals the estimated ATE for all subjects
female <- as.integer(rindb$female) - 1   # generate a treatment indicators of waitstaff sex
lmmodelint <- lm(Y~Z*female)      # regression with interaction between happyface and waitstaff sex
summary(lmmodelint)
lmmodel <- lm(Y~Z+female)
Y0 <- Y - lmmodel$coefficients["Z"] * Z
Y1 <- Y + lmmodel$coefficients["Z"] * (1 - Z)
f.obs <- lmtest::waldtest(lmmodelint, lmmodel)$F[2]
f.sims <- rep(NA,numiter)
for (i in 1:numiter) {
Z.sim <- perms[,i]
Y.sim <- Y1 * Z.sim + Y0 * (1 - Z.sim)
# regressions based on two nested models: with and without interaction
lmmodelint.sim <- lm(Y.sim ~ Z.sim + female + female * Z.sim)
lmmodel.sim <- lm(Y.sim ~ Z.sim + female)
# calculate the F-statistic by comparing two nested models
f.sims[i] <- lmtest::waldtest(lmmodelint.sim, lmmodel.sim)$F[2]
}
mean(f.sims >= f.obs)
# use estimated coefficients from base model to impute potential outcomes
Y00 <- Y - lmmodel$coefficients["Z"]*Z - lmmodel$coefficients["female"]*female
coefficients["Z"]
lmmodel$coefficients["Z"]
f.obs
mean(f.sims >= f.obs)
set.seed(4356347)   # random number seed, so that results are reproducible
setwd("~/16Spring/4368 Experimental/4.FEDAI replication/Chapter 9")
library(foreign)    # package allows R to read Stata datasets
rindb <- read.dta("Rind_Bordia_JASP_1996.dta")
head(rindb)  # show a snippet of the data
Z <- as.integer(rindb$happyface) - 1   # generate a treatment indicator
Y <- rindb$tip
probs <- genprobexact(Z)
ate <- estate(Y,Z,prob=probs)
numiter <- 10000
perms <- genperms(Z,maxiter=numiter)
Ys <- genouts(Y,Z,ate=ate)            # generate a schedule of potential outcomes under the assumption that the treatment effect equals the estimated ATE for all subjects
testvar <- var(Y[Z==1]) - var(Y[Z==0])
# compare variances in treatment and control groups
vardist <- rep(NA,numiter)
for (i in 1:numiter)
vardist[i] <- var(Y[perms[,i]==1]) - var(Y[perms[,i]==0])
mean(vardist >= testvar)           # p-value for var(Y1)>Var(Y0)
mean(abs(vardist) >= abs(testvar)) # p-value for var(Y1)<>Var(Y0)
female <- as.integer(rindb$female) - 1   # generate a treatment indicators of waitstaff sex
lmmodelint <- lm(Y~Z*female)      # regression with interaction between happyface and waitstaff sex
summary(lmmodelint)
lmmodel <- lm(Y~Z+female)
Y0 <- Y - lmmodel$coefficients["Z"] * Z
Y1 <- Y + lmmodel$coefficients["Z"] * (1 - Z)
f.obs <- lmtest::waldtest(lmmodelint, lmmodel)$F[2]
f.sims <- rep(NA,numiter)
for (i in 1:numiter) {
Z.sim <- perms[,i]
Y.sim <- Y1 * Z.sim + Y0 * (1 - Z.sim)
# regressions based on two nested models: with and without interaction
lmmodelint.sim <- lm(Y.sim ~ Z.sim + female + female * Z.sim)
lmmodel.sim <- lm(Y.sim ~ Z.sim + female)
# calculate the F-statistic by comparing two nested models
f.sims[i] <- lmtest::waldtest(lmmodelint.sim, lmmodel.sim)$F[2]
}
mean(f.sims >= f.obs)
probs
numiter <- 1000
perms <- genperms(Z,maxiter=numiter)
perms
Ys <- genouts(Y,Z,ate=ate)            # generate a schedule of potential outcomes under the assumption that the treatment effect equals the estimated ATE for all subjects
testvar <- var(Y[Z==1]) - var(Y[Z==0])
# compare variances in treatment and control groups
vardist <- rep(NA,numiter)
for (i in 1:numiter)
vardist[i] <- var(Y[perms[,i]==1]) - var(Y[perms[,i]==0])
mean(vardist >= testvar)           # p-value for var(Y1)>Var(Y0)
mean(abs(vardist) >= abs(testvar)) # p-value for var(Y1)<>Var(Y0)
female <- as.integer(rindb$female) - 1   # generate a treatment indicators of waitstaff sex
lmmodelint <- lm(Y~Z*female)      # regression with interaction between happyface and waitstaff sex
summary(lmmodelint)
lmmodel <- lm(Y~Z+female)
Y0 <- Y - lmmodel$coefficients["Z"] * Z
Y1 <- Y + lmmodel$coefficients["Z"] * (1 - Z)
f.obs <- lmtest::waldtest(lmmodelint, lmmodel)$F[2]
f.sims <- rep(NA,numiter)
for (i in 1:numiter) {
Z.sim <- perms[,i]
Y.sim <- Y1 * Z.sim + Y0 * (1 - Z.sim)
# regressions based on two nested models: with and without interaction
lmmodelint.sim <- lm(Y.sim ~ Z.sim + female + female * Z.sim)
lmmodel.sim <- lm(Y.sim ~ Z.sim + female)
# calculate the F-statistic by comparing two nested models
f.sims[i] <- lmtest::waldtest(lmmodelint.sim, lmmodel.sim)$F[2]
}
mean(f.sims >= f.obs)
Y0
Y1
setwd("~/MA/2019Spring/RA/FEDAI data/Chapter 8")
setwd("~/16Spring/4368 Experimental/4.FEDAI replication/Chapter 8/Section 8.4 Hotspots")
rm(list = ls())
library(foreign)
true_ate_01 <- with(hotspots, mean(y01[prox500==1]) - mean(y00[prox500==1]))
true_ate_10 <- with(hotspots, mean(y10[prox500==1]) - mean(y00[prox500==1]))
true_ate_11 <- with(hotspots, mean(y11[prox500==1]) - mean(y00[prox500==1]))
true_ate_01
hotspots <- within(hotspots,{
exposure[exposure == 11] <- "11" # Indirect and Direct Treatment
exposure[exposure == 10] <- "10" # Indirect Treatment
exposure[exposure == 01] <- "01" # Direct Treatment
exposure[exposure == 00] <- "00" # Control
Q <- NA
Q[exposure == "11"] <- prob11[exposure == "11"]
Q[exposure == "10"] <- prob10[exposure == "10"]
Q[exposure == "01"] <- prob01[exposure == "01"]
Q[exposure == "00"] <- prob00[exposure == "00"]
# Generate weights
weights <- 1/Q
})
fit.01 <- lm(y ~ exposure, weights=weights,
subset(hotspots, prox500 > 0 & exposure %in% c("00", "01")))
setwd("~/16Spring/4368 Experimental/4.FEDAI replication/Chapter 8/Section 8.4 Hotspots")
rm(list = ls())
library(foreign)
hotspot <- read.csv("GerberGreenBook_Chapter8_Table_8_4_8_5.csv")
true_ate_01 <- with(hotspots, mean(y01[prox500==1]) - mean(y00[prox500==1]))
true_ate_10 <- with(hotspots, mean(y10[prox500==1]) - mean(y00[prox500==1]))
true_ate_11 <- with(hotspots, mean(y11[prox500==1]) - mean(y00[prox500==1]))
true_ate_01
hotspots <- within(hotspots,{
exposure[exposure == 11] <- "11" # Indirect and Direct Treatment
exposure[exposure == 10] <- "10" # Indirect Treatment
exposure[exposure == 01] <- "01" # Direct Treatment
exposure[exposure == 00] <- "00" # Control
Q <- NA
Q[exposure == "11"] <- prob11[exposure == "11"]
Q[exposure == "10"] <- prob10[exposure == "10"]
Q[exposure == "01"] <- prob01[exposure == "01"]
Q[exposure == "00"] <- prob00[exposure == "00"]
# Generate weights
weights <- 1/Q
})
fit.01 <- lm(y ~ exposure, weights=weights,
subset(hotspots, prox500 > 0 & exposure %in% c("00", "01")))
fit.10 <- lm(y ~ exposure, weights=weights,
subset(hotspots, prox500 > 0 & exposure %in% c("00", "10")))
fit.11 <- lm(y ~ exposure, weights=weights,
subset(hotspots, prox500 > 0 & exposure %in% c("00", "11")))
stargazer::stargazer(fit.01, fit.10, fit.11, type = "text")
hotspots <- read.csv("GerberGreenBook_Chapter8_Table_8_4_8_5.csv")
rm(list = ls())
library(foreign)
hotspots <- read.csv("GerberGreenBook_Chapter8_Table_8_4_8_5.csv")
true_ate_01 <- with(hotspots, mean(y01[prox500==1]) - mean(y00[prox500==1]))
true_ate_10 <- with(hotspots, mean(y10[prox500==1]) - mean(y00[prox500==1]))
true_ate_11 <- with(hotspots, mean(y11[prox500==1]) - mean(y00[prox500==1]))
true_ate_01
hotspots <- within(hotspots,{
exposure[exposure == 11] <- "11" # Indirect and Direct Treatment
exposure[exposure == 10] <- "10" # Indirect Treatment
exposure[exposure == 01] <- "01" # Direct Treatment
exposure[exposure == 00] <- "00" # Control
Q <- NA
Q[exposure == "11"] <- prob11[exposure == "11"]
Q[exposure == "10"] <- prob10[exposure == "10"]
Q[exposure == "01"] <- prob01[exposure == "01"]
Q[exposure == "00"] <- prob00[exposure == "00"]
# Generate weights
weights <- 1/Q
})
fit.01 <- lm(y ~ exposure, weights=weights,
subset(hotspots, prox500 > 0 & exposure %in% c("00", "01")))
fit.10 <- lm(y ~ exposure, weights=weights,
subset(hotspots, prox500 > 0 & exposure %in% c("00", "10")))
fit.11 <- lm(y ~ exposure, weights=weights,
subset(hotspots, prox500 > 0 & exposure %in% c("00", "11")))
stargazer::stargazer(fit.01, fit.10, fit.11, type = "text")
rm(list = ls())
library(foreign)
hotspot_nonexp<-read.csv("GerberGreenBook_Chapter8_Table_8_4_8_5.csv")
hotspot_nonexp <- within(hotspot_nonexp,{
exposure[exposure==10] <- "10"
exposure[exposure==0] <- "00"
Q <- NA
Q[exposure=="10"] <- prob10[exposure=="10"]
Q[exposure=="00"] <- prob00[exposure=="00"]
weights <- 1/Q
})
fit.nonexp <- lm(y ~ exposure, weights=weights,
data=subset(hotspot_nonexp, prob10 > 0 & prob10 < 1))
fit.nonexp
stargazer::stargazer(fit.01, fit.10, fit.11, type = "text")
hotspots <- read.csv("GerberGreenBook_Chapter8_Table_8_4_8_5.csv")
# part b)
true_ate_01 <- with(hotspots, mean(y01[prox500==1]) - mean(y00[prox500==1]))
true_ate_10 <- with(hotspots, mean(y10[prox500==1]) - mean(y00[prox500==1]))
true_ate_11 <- with(hotspots, mean(y11[prox500==1]) - mean(y00[prox500==1]))
true_ate_01
true_ate_10
true_ate_11
hotspots <- within(hotspots,{
exposure[exposure == 11] <- "11" # Indirect and Direct Treatment
exposure[exposure == 10] <- "10" # Indirect Treatment
exposure[exposure == 01] <- "01" # Direct Treatment
exposure[exposure == 00] <- "00" # Control
Q <- NA
Q[exposure == "11"] <- prob11[exposure == "11"]
Q[exposure == "10"] <- prob10[exposure == "10"]
Q[exposure == "01"] <- prob01[exposure == "01"]
Q[exposure == "00"] <- prob00[exposure == "00"]
# Generate weights
weights <- 1/Q
})
fit.01 <- lm(y ~ exposure, weights=weights,
subset(hotspots, prox500 > 0 & exposure %in% c("00", "01")))
fit.10 <- lm(y ~ exposure, weights=weights,
subset(hotspots, prox500 > 0 & exposure %in% c("00", "10")))
fit.11 <- lm(y ~ exposure, weights=weights,
subset(hotspots, prox500 > 0 & exposure %in% c("00", "11")))
stargazer::stargazer(fit.01, fit.10, fit.11, type = "text")
# part c)
rm(list = ls())
library(foreign)
hotspot_nonexp<-read.csv("GerberGreenBook_Chapter8_Table_8_4_8_5.csv")
hotspot_nonexp <- within(hotspot_nonexp,{
exposure[exposure==10] <- "10"
exposure[exposure==0] <- "00"
Q <- NA
Q[exposure=="10"] <- prob10[exposure=="10"]
Q[exposure=="00"] <- prob00[exposure=="00"]
weights <- 1/Q
})
fit.nonexp <- lm(y ~ exposure, weights=weights,
data=subset(hotspot_nonexp, prob10 > 0 & prob10 < 1))
fit.nonexp
# part c)
rm(list = ls())
library(foreign)
hotspot_nonexp<-read.csv("GerberGreenBook_Chapter8_Exercise_9c.csv")
hotspot_nonexp <- within(hotspot_nonexp,{
exposure[exposure==10] <- "10"
exposure[exposure==0] <- "00"
Q <- NA
Q[exposure=="10"] <- prob10[exposure=="10"]
Q[exposure=="00"] <- prob00[exposure=="00"]
weights <- 1/Q
})
fit.nonexp <- lm(y ~ exposure, weights=weights,
data=subset(hotspot_nonexp, prob10 > 0 & prob10 < 1))
fit.nonexp
hotspot_nonexp<-dplyr::rename(hotspot_nonexp, treatment = exposure)
hotspot_nonexp<-dplyr::rename(hotspot_nonexp, exposure = treatment )
hotspots <- read.csv("GerberGreenBook_Chapter8_Table_8_4_8_5.csv")
summary(hotspot_nonexp)
hotspot_nonexp<-dplyr::rename(hotspot_nonexp, prob10 = Y10 )
hotspot_nonexp<-dplyr::rename(hotspot_nonexp, prob00 = Y10 )
hotspot_nonexp <- within(hotspot_nonexp,{
exposure[exposure==10] <- "10"
exposure[exposure==0] <- "00"
Q <- NA
Q[exposure=="10"] <- prob10[exposure=="10"]
Q[exposure=="00"] <- prob00[exposure=="00"]
weights <- 1/Q
})
hotspot_nonexp <-read.csv("GerberGreenBook_Chapter8_Exercise_9c.csv")
hotspot_nonexp<-dplyr::rename(hotspot_nonexp, exposure = treatment )
hotspot_nonexp<-dplyr::rename(hotspot_nonexp, prob10 = Y10 )
hotspot_nonexp<-dplyr::rename(hotspot_nonexp, prob00 = Y00 )
hotspot_nonexp <- within(hotspot_nonexp,{
exposure[exposure==10] <- "10"
exposure[exposure==0] <- "00"
Q <- NA
Q[exposure=="10"] <- prob10[exposure=="10"]
Q[exposure=="00"] <- prob00[exposure=="00"]
weights <- 1/Q
})
fit.nonexp <- lm(y ~ exposure, weights=weights,
data=subset(hotspot_nonexp, prob10 > 0 & prob10 < 1))
fit.nonexp <- lm(Y ~ exposure, weights=weights,
data=subset(hotspot_nonexp, prob10 > 0 & prob10 < 1))
View(hotspots)
rm(list = ls())
library(foreign)
hotspot_nonexp <-read.csv("GerberGreenBook_Chapter8_Exercise_9c.csv")
rm(list = ls())
library(foreign)
hotspot_nonexp <-read.csv("GerberGreenBook_Chapter8_Exercise_9c.csv")
hotspot_nonexp <- within(hotspot_nonexp,{
exposure[exposure==10] <- "10"
exposure[exposure==0] <- "00"
Q <- NA
Q[exposure=="10"] <- prob10[exposure=="10"]
Q[exposure=="00"] <- prob00[exposure=="00"]
weights <- 1/Q
})
fit.nonexp <- lm(Y ~ exposure, weights=weights,
data=subset(hotspot_nonexp, prob10 > 0 & prob10 < 1))
fit.nonexp <- lm(y ~ exposure, weights=weights,
data=subset(hotspot_nonexp, prob10 > 0 & prob10 < 1))
fit.nonexp
setwd("~/MA/2019Spring/RAship/FEDAI/FEDAI data/Chapter 8")
rm(list=ls())       # clear objects in memory
library(ri)         # load the RI package
set.seed(123)   # random number seed, so that results are reproducible
library(foreign)    # package allows R to read Stata datasets
hough <- read.dta("Chapter 8_Leslie Hough self-experiment data.dta")
View(hough)
Y <- hough$tetris
Z <- hough$run
N <- length(Z)
# lagged time variable
Zlag <- c(NA,Z[2:N-1]) # exclude day 1 from analysis
Ylag <- c(NA,Y[2:N-1])
# lagged time variable
Zlag
Ylag
Y <- hough$tetris
Z <- hough$run
N <- length(Z)
# lagged time variable
Zlag <- c(NA,Z[2:N-1]) # exclude day 1 from analysis
Ylag <- c(NA,Y[2:N-1])
randfun <- function() rbinom(N,1,.5)    # simple random assignment based on coin flips
numiter <- 10000
perms <- genperms.custom(numiter=numiter,randfun=randfun)  # random assignment follows the custom function "randfun"
test1 <- lm(Y~Z)$coefficients["Z"]             # regress Y on current Z
test2 <- summary(lm(Y~Z+Zlag))$fstatistic[1]   # regress Y on current and lagged Z (test no-persistence)
test3 <- lm(Ylag~Z)$coefficients["Z"]          # placebo test: regress lagged Y on Z (test no-anticipation)
test4 <- lm(hough$energy~Z)$coefficients["Z"]  # consider current Z's effects on energy
test5 <- lm(hough$gre~Z)$coefficients["Z"]     # consider current Z's effects on GRE
test1
# initialize the five vectors of results (all 5 at the same time!)
testdist1 <- testdist2 <- testdist3 <- testdist4 <- testdist5 <- rep(NA,numiter)
for (i in 1:numiter) {
Zri <- perms[,i]
Zlagri <- c(NA,Zri[2:N-1]) # exclude day 1 from analysis
testdist1[i] <- lm(Y~Zri)$coefficients["Zri"]
testdist2[i] <- summary(lm(Y~Zri+Zlagri))$fstatistic[1]
testdist3[i] <- lm(Ylag~Zri)$coefficients["Zri"]
testdist4[i] <- lm(hough$energy~Zri)$coefficients["Zri"]
testdist5[i] <- lm(hough$gre~Zri)$coefficients["Zri"]
}
mean(testdist1 >= test1)      # one-tailed p-value: does running increase Tetris scores
test2 <- summary(lm(Y~Z+Zlag))$fstatistic[1]   # regress Y on current and lagged Z (test no-persistence)
test2
test3
test4
test5
test2
test4
