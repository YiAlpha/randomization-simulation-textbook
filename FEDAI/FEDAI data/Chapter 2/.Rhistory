rm(list=ls())       # clear objects in memory
library(ri)         # load the RI package
set.seed(1234567)   # random number seed, so that results are reproducible
# input full schedule of potential outcomes
# using Table 2.1
Y0 <- c(10,15,20,20,10,15,15)
Y1 <- c(15,15,30,15,20,15,30)
# create a potential outcomes object called a data frame
Ys <- data.frame(Y0,Y1)
# check column means
colMeans(Ys)
# (the covariance estimators should really divide by N rather than N-1)
cov(Ys)*6/7
# create a vector of possible assignments
Z  <- c(1,0,0,0,0,0,1)
# in order to randomly sample with replacement from Z
# type the command
# sample(Z)
sample(Z)
sample(Z)
sample(Z)
sample(Z)
sample(Z)
sample(Z)
sample(Z)
perms <- genperms(Z)
perms
# show number of permutations
cat(ncol(perms)," = number of permutations")
probs <- genprobexact(Z,blockvar=NULL)  # inputs imply equal-probability assignment
# verify that probability of treatment is constant across the sample
table(probs)
# calculate the sampling distribution of estimated difference-in-means
truedist <- gendist(Ys,perms,Ypre=NULL,prob=probs,HT=FALSE)
# display the frequency distribution of the sampling distribution
rm(list=ls())       # clear objects in memory
library(ri)         # load the RI package
set.seed(1234567)   # random number seed, so that results are reproducible
rm(list=ls())       # clear objects in memory
library(ri)         # load the RI package
set.seed(1234567)   # random number seed, so that results are reproducible
# input full schedule of potential outcomes
# using Table 2.1
Y0 <- rep(c(1,90),c(0,10))
Y0
Y0 <- rep(c(0,1),c(10,90))
Y0
Y1 <- rep(c(0,1),c(12,88))
Y1
D<-rep(c(0,1),c(100,100))
D
Y <-Y0*(1-D)+Y1*D
Y
df<-as.data.frame(cbind(Y,D))
View(df)
probs <- genprobexact(D)
table(probs)
ate <- estate(Y,D)
ate <- estate(Y,D,prob = probs)
ate
#   --------------------------
#   Randomization Inference
#   --------------------------
# specify block and the algorithm can weight each observation
perms <- genperms(D,maxiter=10000)
Ys <- genouts(Y,D,ate=0)
Ys
# hypothetically replicate 10000 times, randomly choose in the permutations
# probabilities vary across block, weight each observation using IPW
distout <- gendist(Ys,perms,prob=probs)
# now we have 10000 hypothetical ATE to draw sampling distribution
distout
# The estimated ATE obtained from sample
ate
# Two-tailed comparison used to calculate p-value
mean(abs(distout) >= abs(ate))
# The estimated ATE obtained from sample
ate
# Two-tailed comparison used to calculate p-value
mean(abs(distout) >= abs(ate))
# display p-values, 95% confidence interval, standard error under the null,
#                       and graph the sampling distribution under the null
dispdist(distout,ate)
Ys <- genouts(Y,D,ate=ate)
# hypothetically replicate 10000 times, randomly choose in the permutations
# probabilities vary across block, weight each observation using IPW
distout <- gendist(Ys,perms,prob=probs)
# now we have 10000 hypothetical ATE to draw sampling distribution
distout
# The estimated ATE obtained from sample
ate
# The estimated ATE obtained from sample
ate
# Two-tailed comparison used to calculate p-value
mean(abs(distout) >= abs(ate))
# display p-values, 95% confidence interval, standard error under the null,
#                       and graph the sampling distribution under the null
dispdist(distout,ate)
abline(v=-0.1020,lty=3,col="red")
abline(v=-0.1020,lty=3,col="red",lwd=3)
abline(v=0.0616,lty=3,col="red",lwd=3)
View(df)
mean(abs(distout) >= abs(ate))
rm(list=ls())
library(ri)
set.seed(1234567)
#   --------------------------
#   Load data
#   --------------------------
Y0 <- rep(c(0,1),c(10,90))
Y1 <- rep(c(0,1),c(12,88))
D<-rep(c(0,1),c(100,100))
Y <-Y0*(1-D)+Y1*D
df<-as.data.frame(cbind(Y,D))
#   --------------------------
#   Estimated ATE
#   --------------------------
probs <- genprobexact(D)
ate <- estate(Y,D,prob = probs)
ate
#   --------------------------
#   Randomization Inference
#   --------------------------
# simulate 10000 times
perms <- genperms(D,maxiter=10000)
# generate the complete schedule under sharp null
Ys <- genouts(Y,D,ate=0)
# obtian 10000 estimate ATE
distout <- gendist(Ys,perms,prob=probs)
# The estimated ATE obtained from sample
ate
# Two-tailed comparison used to calculate p-value
mean(abs(distout) >= abs(ate))
# display p-values, 95% confidence interval, standard error under the null,
#                       and graph the sampling distribution under the null
dispdist(distout,ate)
sum(abs(distout) >= abs(ate))
Ys <- genouts(Y,D,ate=ate)
# obtian 10000 estimate ATE
distout <- gendist(Ys,perms,prob=probs)
# display p-values, 95% confidence interval, standard error under
dispdist(distout,ate)
abline(v=-0.1020,lty=3,col="red",lwd=3)
abline(v=0.0616,lty=3,col="red",lwd=3)
