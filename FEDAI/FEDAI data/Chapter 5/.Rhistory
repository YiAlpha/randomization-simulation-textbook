library("ri")
?ri
?ri
ri-internal {ri}
ri-internal
y <- c(8,6,2,0,3,1,1,1,2,2,0,1,0,2,2,4,1,1)
y <- c(8,6,2,0,3,1,1,1,2,2,0,1,0,2,2,4,1,1)
Z <- c(1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0)
cluster <- c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9)
block <- c(rep(1,4),rep(2,6),rep(3,8))
perms <- genperms(Z,blockvar=block, clustvar=cluster) # all possible permutations
probs <- genprobexact(Z,blockvar=block, clustvar=cluster) # probability of treatment
ate <- estate(y,Z,prob=probs) # estimate the ATE
## Conduct Sharp Null Hypothesis Test of Zero Effect for Each Unit
Ys <- genouts(y,Z,ate=0) # generate potential outcomes under sharp null of no effect
distout <- gendist(Ys,perms, prob=probs) # generate sampling dist. under sharp null
dispdist(distout, ate)  # display characteristics of sampling dist. for inference
## Generate Sampling Distribution Around Estimated ATE
Ys <- genouts(y,Z,ate=ate) ## generate potential outcomes under tau = ATE
distout <- gendist(Ys,perms, prob=probs) # generate sampling dist. under tau = ATE
dispdist(distout, ate)  ## display characteristics of sampling dist. for inference
y <- c(8,6,2,0,3,1,1,1,2,2,0,1,0,2,2,4,1,1)
Z <- c(1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0)
cluster <- c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9)
block <- c(rep(1,4),rep(2,6),rep(3,8))
probs <- genprobexact(Z,blockvar=block, clustvar=cluster) # probability of treatment
ate <- estate(y,Z,prob=probs) # estimate the ATE
y <- c(8,6,2,0,3,1,1,1,2,2,0,1,0,2,2,4,1,1)
Z <- c(1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0)
D <- c(1,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,0,1)
cluster <- c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9)
block <- c(rep(1,4),rep(2,6),rep(3,8))
probs <- genprobexact(Z,block,cluster) # generate probability of assignment
late <- estlate(y,D,Z,prob=probs) # estimate the LATE; estimated LATE = 9
y <- c(8,6,2,0,3,1,1,1,2,2,0,1,0,2,2,4,1,1)
Z <- c(1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0)
cluster <- c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9)
block <- c(rep(1,4),rep(2,6),rep(3,8))
perms <- genperms(Z,blockvar=block, clustvar=cluster) # all possible permutations
probs <- genprobexact(Z,blockvar=block, clustvar=cluster) # probability of treatment
ate <- estate(y,Z,prob=probs) # estimate the ATE
## Conduct Sharp Null Hypothesis Test of Zero Effect for Each Unit
Ys <- genouts(y,Z,ate=0) # generate potential outcomes under sharp null of no effect
distout <- gendist(Ys,perms, prob=probs) # generate sampling dist. under sharp null
dispdist(distout, ate)  # display characteristics of sampling dist. for inference
## Generate Sampling Distribution Around Estimated ATE
Ys <- genouts(y,Z,ate=ate) ## generate potential outcomes under tau = ATE
distout <- gendist(Ys,perms, prob=probs) # generate sampling dist. under tau = ATE
dispdist(distout, ate)  ## display characteristics of sampling dist. for inference
## Rejected randomization scheme: reject if and only if there is significant imbalance
X <- c(1:200)
randfun <- function() {
teststat <- -1
while (teststat < 0.05) {
Zri <- sample(c(rep(0,180),rep(1,20))) # imbalanced design
fstat <- summary(lm(Zri~X))$fstatistic
teststat <- pf(fstat[1],fstat[2],fstat[3],lower.tail=FALSE)  # extract F-test p-value
}
return(Zri)
}
perms <- genperms.custom(numiter=10000, randfun=randfun) # generate permutations
probs <- genprob(perms) # generate approximate probabilities from permutation matrix
cor(probs,(X-mean(X))^2) # observations with extreme X are less likely to be treated
## Rejected randomization scheme: reject if and only if there is significant imbalance
X <- c(1:200)
randfun <- function() {
teststat <- -1
while (teststat < 0.05) {
Zri <- sample(c(rep(0,180),rep(1,20))) # imbalanced design
fstat <- summary(lm(Zri~X))$fstatistic
teststat <- pf(fstat[1],fstat[2],fstat[3],lower.tail=FALSE)  # extract F-test p-value
}
return(Zri)
}
perms <- genperms.custom(numiter=10000, randfun=randfun) # generate permutations
probs <- genprob(perms) # generate approximate probabilities from permutation matrix
cor(probs,(X-mean(X))^2) # observations with extreme X are less likely to be treated
y <- c(8,6,2,0,3,1,1,1,2,2,0,1,0)
Z <- c(1,1,0,0,1,1,0,0,1,1,1,1,0)
perms <- genperms(Z) ## all possible permutations of assignment to treatment
probs <- genprobexact(Z) ## assuming complete randomization
c(invert.ci(y,Z,probs,perms,0.025),invert.ci(y,Z,probs,perms,0.975)) ## 95% CI
y <- c(8,6,2,0,3,1,1,1,2,2,0,1,0,2,2,4,1,1)
Z <- c(1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0)
X <- c(1:18)
cluster <- c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9)
block <- c(rep(1,4),rep(2,6),rep(3,8))
probs <- genprobexact(Z,block,cluster) # generate probability of assignment
resresplot(y,Z,X,prob=probs,scale=3) # produce res-res plot
set.seed(1234567)         # set random seed
N <- 7              # number of units
m <- 2              # number of treated units
sel <- rnorm(N)     # N standard Normal deviates
Tr <- order(sel)    # ordering permutation which orders the deviates
Tr[1:m]             # the first m indexes are treated units
# another version
# clear workspace
rm(list = ls())
# note first must set file directory where data file is stored
# example for mac: setwd("/Users/name/Documents/Data/")
# example for windows: setwd("C:/Documents/Data/") or setwd("C:\\Documents\\Data\\")
# if not sure of working directory, type: getwd()
set.seed(1234567)      # set random seed
load("GerberGreenBook_Chapter2_HowToRandomize_7pick2.RData")   # load dataset named data1 from file
N <- nrow(data1)        # number of units
m <- 2                  # number of treated units
sel <- rnorm(N)         # N standard Normal deviates
sel <- order(sel, decreasing = TRUE) # ordering permutation which orders the deviates
data1$Tr <- 0           # create treatment dummy variable in dataset
data1$Tr[sel[1:m]] <- 1 # the observations corresponding to the m largest deviates are assigned to treatment
data1  				# display treatment assignment
load("~/Dropbox/Field Experimentation Book/Final Code for Vignettes and Problems/Chapter 2/GerberGreenBook_Chapter2_HowToRandomize_7treat2.RData")
# simulation in which 2 of 7 villages from Table 2.1 are assigned to treatment
rm(list=ls())       # clear objects in memory
library(ri)         # load the RI package
set.seed(1234567)   # random number seed, so that results are reproducible
# input full schedule of potential outcomes
# using Table 2.1
Y0 <- c(10,15,20,20,10,15,15)
Y1 <- c(15,15,30,15,20,15,30)
# create a potential outcomes object called a data frame
Ys <- data.frame(Y0,Y1)
# check column means
colMeans(Ys)
# create a vector of possible assignments
Z  <- c(rep(1,2),rep(0,5))
# in order to randomly sample with replacement from Z
# type the command
# sample(Z)
# generate all permutations of Z under _complete_ random assignment
# note that default is to do every possible permutation if less than 10,000 permutations
perms <- genperms(Z)
# show number of permutations
cat(ncol(perms)," = number of permutations")
probs <- genprobexact(Z,blockvar=NULL)  # inputs imply equal-probability assignment
# verify that probability of treatment is constant across the sample
table(probs)
# calculate the sampling distribution of estimated difference-in-means
truedist <- gendist(Ys,perms,Ypre=NULL,prob=probs,HT=FALSE)
# display the frequency distribution of the sampling distribution
table(truedist)
# graphically display the sampling distribution
dispdist(truedist,0)
# show the ATE estimate for each random assignment
truedist
# show the link between each estimate and each randomization
rbind(truedist)
load("~/Dropbox/Field Experimentation Book/Final Code for Vignettes and Problems/Chapter 2/GerberGreenBook_Chapter2_HowToRandomize_7treat2.RData")
setwd("~/Dropbox/Field Experimentation Book/Final Code for Vignettes and Problems/Chapter 3")
rm(list=ls(all=TRUE))
library(ri)
set.seed(1234567)
Y0 <- c(0,1,2,4,4,6,6,9,14,15,16,16,17,18)
Y1 <- c(0,0,1,2,0,0,2,3,12,9,8,15,5,17)
Z <- c(1,1,0,0,0,0,0,0,0,0,0,0,1,1)
# generate all permutations of Z under _complete_ random assignment
# note that default is to do every possible permutation if less than 10,000 permutations
compperms <- genperms(Z)
numperms <- ncol(compperms)
# create empty vector
compmeans <- rep(NA,numperms)
# loop to create average treatment effect estimates for each randomization
for (i in 1:numperms) compmeans[i] <- mean(Y1[compperms[,i]==1]) - mean(Y0[compperms[,i]==0])
# randomize within blocks
block <- c(1,1,1,1,1,1,1,1,2,2,2,2,2,2)
# generate all permutations of Z under block random assignment
blockperms <- genperms(Z,block)
numperms <- ncol(blockperms)
# create empty vector
blockmeans <- rep(NA,numperms)
# loop to create average treatment effect estimates for each randomization
for (i in 1:numperms) blockmeans[i] <- weighted.mean(Y1[blockperms[,i]==1],c(8/2,8/2,6/2,6/2)) - weighted.mean(Y0[blockperms[,i]==0],c(8/6,8/6,8/6,8/6,8/6,8/6,6/4,6/4,6/4,6/4))
save(compmeans,blockmeans,file="figure3.1.Rdata")
# Draw histograms for Figure 3.1
par(mfrow=c(2,1))
hist(compmeans,main="Sampling Distribution under Complete Randomization",xlim=c(-15,10),xlab="ATE Estimates",freq=FALSE,ylim=c(0,.3))
hist(blockmeans,main="Sampling Distribution under Blocked Randomization",xlim=c(-15,10),xlab="ATE Estimates",freq=FALSE,ylim=c(0,.3))
# calculate the proportion of esitmates that are above zero
length(compmeans[compmeans > 0])
length(compmeans[compmeans > 0])/length(compmeans)
length(blockmeans[blockmeans > 0])
length(blockmeans[blockmeans > 0])/length(blockmeans)
setwd("~/Dropbox/Field Experimentation Book/Final Code for Vignettes and Problems/Chapter 4")
# Reproducing Figures 4.1 and 4.2
# clear workspace
rm(list = ls())
# note first must set file directory where data file is stored
# example for mac: setwd("/Users/name/Documents/Data/")
# example for windows: setwd("C:/Documents/Data/") or setwd("C:\\Documents\\Data\\")
# if not sure of working directory, type: getwd()
# Load in library to read stata files
library(foreign)
# Load in Data, changing directory name as appropriate
teacherout <- read.dta("GerberGreenBook_Chapter4_Simulated_TeacherOutput.dta")
# Or load in Data as a .csv file, changing directory name as appropriate
teacherout <- read.csv(file="GerberGreenBook_Chapter4_Simulated_TeacherOutput.csv",head=TRUE,sep=",")
# Attach Data
attach(teacherout)
## Reproduce Figure 4.1
# Create space to draw Figure 4.1
par(family="Gill Sans MT",font.main=1)
layout(matrix(c(1,2),2,1,byrow=TRUE))
# Graph the top part of Figure 4.1
hist(diffinmean,xlim=c(-10,20),freq=FALSE,ylim=c(0,.25),main="Sampling Distributions",xlab="Difference-in-Means")
lines(density(diffinmean))
# Graph the bottom part of Figure 4.1
hist(diffinchangemeans,xlim=c(-10,20),freq=FALSE,ylim=c(0,.25),main=NULL,xlab="Difference-in-Differences")
lines(density(diffinchangemeans))
# Detach data so can reload data with identical variable names in examples below.
detach(teacherout)
#########
## To reproduce Figure 4.2
# Follow instructions above for setting working directory and loadng in data appropriately.
### Reproducing the first histogram: simple randomization
teacherout <- read.dta("/Users/alissastollwerk/Documents/Columbia/Dropbox/Field Experimentation Book/Statistical Routines for examples/teacheroutput.dta")
attach(teacherout)
par(family="Gill Sans MT",font.main=1)
layout(matrix(c(1,2,3),3,1,byrow=TRUE))
hist(teacherout$diffinmean,xlim=c(-10,20),freq=FALSE,ylim=c(0,.30),main="Sampling Distributions",xlab="Simple Randomization")
lines(density(teacherout$diffinmean))
detach(teacherout)
### Reproducing the second histogram: block randomization (strong predictor)
teacherout <- read.dta("/Users/alissastollwerk/Documents/Columbia/Dropbox/Field Experimentation Book/Statistical Routines for examples/teacheroutputblock.dta")
attach(teacherout)
hist(teacherout$diffinmean,xlim=c(-10,20),freq=FALSE,ylim=c(0,.30),main=NULL,xlab="Blocked Randomization (Strong Predictor)")
lines(density(teacherout$diffinmean))
detach(teacherout)
### Reproducing the third histogram: block randomization (weak predictor)
teacherout <- read.dta("/Users/alissastollwerk/Documents/Columbia/Dropbox/Field Experimentation Book/Statistical Routines for examples/teacheroutputblockweak.dta")
attach(teacherout)
hist(teacherout$diffinmean,xlim=c(-10,20),freq=FALSE,ylim=c(0,.30),main=NULL,xlab="Blocked Randomization (Weak Predictor)")
lines(density(teacherout$diffinmean))
# Create Resresplot for Figure 4.3
rm(list=ls())       # clear objects in memory
set.seed(1234567)   # random number seed, so that results are reproducible
library(ri)       # load the RI package
# Enter in Data from Table 4.2
Y1 <- c(5,15,12,19,17,18,24,11,16,25,18,21,17,24,27,26,30,37,43,39,36,27,33,37,48,39,42,37,53,50,51,43,55,49,48,52,59,52,55,63)
Y0 <- c(5,5,6,9,10,11,12,13,14,19,20,20,20,21,24,25,27,27,30,32,32,32,32,35,35,37,38,38,41,42,43,44,45,47,48,51,52,52,57,62)
Xweak <- c(25,12,25,27,10,24,21,25,35,28,41,38,30,20,24,26,22,34,37,21,40,34,36,37,48,46,25,21,19,44,50,48,46,47,47,39,50,46,54,42)
# Display Mean
mean(Y1-Y0)
### Data Generating Process
blockvar <- c(1,1,1,1,1,3,1,1,1,1,1,3,1,1,1,1,1,1,3,3,1,1,1,2,2,3,1,1,1,2,2,2,1,1,1,2,2,2,2,2)
Z <- c(0,1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,1,1,0,0,1,0,0,1,1,1,0,1,1,0)
Y <- Y0*(1-Z) + Y1*(Z)
# temp-prob
prob <- genprobexact(Z,blockvar)
cat(ate <- estate(Y,Z,Xweak,prob=prob))
### Generate Confidence Intervals
perms <- genperms(Z=Z,blockvar=blockvar, maxiter = 1000)
Ys.est <- genouts(Y,Z,ate)
estdist <- gendist(Ys.est,perms,X=Xweak,prob=prob,HT=FALSE)
# Graph Distribution of the Estimated ATE
# dispdist(estdist,ate)
mean(estdist)
ate
Ys.est <- genouts(Y,Z,ate=0)
estdist <- gendist(Ys.est,perms,X=Xweak,prob=prob,HT=FALSE)
# Graph Distribution of the Estimated ATE
# dispdist(estdist,ate,display.plot=FALSE)
### Comparisons to Graph Figure 4.3
weights <- Z/prob + (1-Z)/(1-prob)
summary(lm(Y~Z+Xweak,weights=weights))
summary(lm(Y~Z+Xweak+factor(blockvar)))
summary(lm(Y~Z+Xweak+factor(blockvar),weights=weights))
resresplot(Y,Z,Xweak,prob,scale=10)
# True Sampling Distribution
### CIs
Ys <- data.frame(Y0,Y1)
estdist <- gendist(Ys,perms,X=Xweak,prob=prob,HT=FALSE)
dispdist(estdist,ate)$se
mean(estdist)
mean(Y1-Y0)
setwd("~/Dropbox/Field Experimentation Book/Final Code for Vignettes and Problems/Chapter 5")
# program to create boxes 5.4, 5.5, and 5.6 using New Haven data
#Clear any previous work
rm(list=ls(all=TRUE))
# note first must set file directory where data file is stored
# example for mac: setwd("/Users/name/Documents/Data/")
# example for windows: setwd("C:/Documents/Data/") or setwd("C:\\Documents\\Data\\")
# if not sure of working directory, type: getwd()
#Load Relevant packages
library(foreign)
library(AER)
library(sandwich)
## Note that if you don't have a package, you should first download it by going to Packages and Data and then going to the Packages Installer.  You may also need to download the following packages for these to run (but you will not need to separately load them): zoo, car, Formula, lmtest, strucchange, survival, splines, nnet
data1 <- read.csv(file="Gerber_Green_APSRsubset_2005.csv",head=TRUE,sep=",")
# You can check that your data was read in correctly using these two commands:
# colnames(data1)
# dim(data1)
# select one-person households that were either pure controls or canvass only
sel <-  data1$onetreat==1 & data1$mailings==0 & data1$phongotv==0 & data1$persons==1
# verify the number of observations
table(sel)
data2 <- data1[sel,]
# define variables
v98      <- data2$v98
persngrp <- data2$persngrp
cntany   <- data2$cntany
############  NOTE USE OF ROBUST STANDARD ERRORS
# Box 5.4: ITT
coef(summary(lm(v98 ~ persngrp)))
# robust SEs
itt_fit <- lm(v98 ~ persngrp)
coeftest(itt_fit,vcovHC(itt_fit))
# Box 5.5: IDD_D
# Note that results from this will vary based on the current version that you have but this variation should not be a concern.
coef(summary(lm(cntany ~ persngrp)))
# robust SEs
itt_d_fit <- lm(cntany ~ persngrp)
coeftest(itt_d_fit,vcovHC(itt_d_fit))
# Box 5.6: CACE
coef(summary(ivreg(v98 ~ cntany,~persngrp)))
# robust SEs
cace_fit <- ivreg(v98 ~ cntany,~persngrp)
coeftest(cace_fit,vcovHC(cace_fit))
setwd("~/Dropbox/Field Experimentation Book/Final Code for Vignettes and Problems/Chapter 5")
install.packages("AER")
install.packages("AER")
install.packages("sandwich")
setwd("~/Desktop/2016/4368 Experimental/4.FEDAI replication/Chapter 5")
library(foreign)    # package allows R to read Stata datasets
# Data are from Guan, Mei, and Donald Green. 2006. “Non-Coercive Mobilization in State-Controlled Elections: An Experimental Study in Beijing.” Comparative Political Studies 39:1175-93.
beijing.all <- read.dta("Chapter 5_Guan and Green (2006) Dataset.dta")
colnames(beijing.all)
# get rid of a couple of observations with missing outcome data
beijing <- na.omit(beijing.all)
Z <-     beijing$treat2
Y <-     beijing$turnout
clust <- beijing$dormid
# conduct randomization inference on the ITT (a rejection of the null that ITT=0 also implies a rejection of the null that the CACE=0)
ate <- estate(Y,Z,prob=probs)
probs <- genprobexact(Z,clustvar=clust)  # subjects are clustered by dorm room
numiter <- 10000
perms <- genperms(Z,maxiter=numiter,clustvar=clust)    # clustered assignment
library(ri)         # load the RI package
set.seed(1234567)   # random number seed, so that results are reproducible
probs <- genprobexact(Z,clustvar=clust)  # subjects are clustered by dorm room
numiter <- 10000
perms <- genperms(Z,maxiter=numiter,clustvar=clust)    # clustered assignment
ate <- estate(Y,Z,prob=probs)
ate
2152/2688
892/1334
0.8005952-0.6686657
ate <- estate(Y,Z,prob=probs)
Ys <- genouts(Y,Z,ate=0)
distout <- gendist(Ys,perms,prob=probs)
ate                                  # estimated ATE
sum(distout <= ate)                  # one-tailed comparison
sum(abs(distout) >= abs(ate))        # two-tailed comparison
dispdist(distout,ate)
2152/2688
0.1319295/ 0.8005952
2152/2688
0.8005952-1
0.8005952-0.01
892/1334
0.7905952-0.7905952
0.7905952-0.6686657
0.1219
2380/2688
ate
0.1319296/0.8854167
0.1219295/0.8854167
2152/2688
0.03*(1-0.8854 )
ate
0.1319296- 0.003438
2380/2688
0.1284916/0.8854167
