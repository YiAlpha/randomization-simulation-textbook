summary(lm5)
lm4 <- lm(stereotype ~ age + educ+ lg_hinc + lg_pinc +
marriage*sex + as.numeric(internet_use) +
as.numeric(eng_listen)+ as.numeric(eng_speak), data = gss)
summary(lm4)
lm4 <- lm(stereotype ~ age + educ+ lg_hinc + lg_pinc +
marriage*sex + as.numeric(internet_use)  data = gss)
lm4 <- lm(stereotype ~ age + educ+ lg_hinc + lg_pinc +
marriage*sex + as.numeric(internet_use) +
as.numeric(eng_listen)+ as.numeric(eng_speak), data = gss)
summary(lm4)
lm4 <- lm(stereotype ~ age + educ+ lg_hinc + lg_pinc+ lg_pwinc +
marriage*sex + as.numeric(internet_use) +
as.numeric(eng_listen)+ as.numeric(eng_speak), data = gss)
summary(lm4)
ques_search("子女")
table(data$a68a)
gss$kid_u18 <- case_when(data$a68a>0 ~ 1,
data$a68a==-8 ~ NA_real_,
data$a68a==0 ~0)
lm5 <- lm(stereotype ~ age + educ+ lg_hinc + lg_pinc+ lg_pwinc + kid_u18+
marriage + as.numeric(internet_use) +
as.numeric(eng_listen)+ as.numeric(eng_speak), data = gss)
summary(lm5)
lm5 <- lm(stereotype ~ age + educ+ lg_hinc + lg_pinc+ lg_pwinc + sex*kid_u18+
marriage + as.numeric(internet_use) +
as.numeric(eng_listen)+ as.numeric(eng_speak), data = gss)
summary(lm5)
lm4 <- lm(stereotype ~ age + educ+ lg_hinc + lg_pinc+ lg_pwinc +
marriage + as.numeric(internet_use) +
as.numeric(eng_listen)+ as.numeric(eng_speak), data = gss)
summary(lm4)
lm4 <- lm(stereotype ~ age + educ+ lg_hinc + lg_pinc+ lg_pwinc +
marriage*sex + as.numeric(internet_use) +
as.numeric(eng_listen)+ as.numeric(eng_speak), data = gss)
summary(lm4)
cgss <-cgss%>%mutate(hinc_10k = case_when(a62 < 0 ~ NA_real_,
a62 ==0 ~ 0,
a62 >0 ~ as.numeric(a62)/10000))%>%
mutate(pinc_10k = case_when(a8a < 0 ~ NA_real_,
a8a ==0 ~ 0,
a8a >0 ~ as.numeric(a8a)/10000))%>%
mutate(pwinc_10k = case_when(a8b < 0 ~ NA_real_,
a8b ==0 ~ 0,
a8b >0 ~ as.numeric(a8b)/10000))
gss <- cgss %>%
select(-c(a69,a7a,a2 ,a62 ,a8a ,a8b ,
a285,a51 ,a52, a301, a302, a303))
stargazer::stargazer(gss, type = 'text')
xtable::xtable(gss, type = 'text')
install.packages('qwraps2')
library(qwraps2)
options(qwraps2_markup = "markdown")
summary_table(gss)
our_summary1 <-
list("Age" =
list("min" = ~ min(age),
"max" = ~ max(age),
"mean (sd)" = ~ qwraps2::mean_sd(age)),
"Education" =
list("No Education" = ~ qwraps2::n_perc0(educ == 1),
"Elementary"  = ~ qwraps2::n_perc0(educ == 2),
"Middle School"  = ~ qwraps2::n_perc0(educ == 3),
"High School"  = ~ qwraps2::n_perc0(educ == 4),
"University and Above"  = ~ qwraps2::n_perc0(educ == 5))
)
summary_table(gss, our_summary1)
our_summary1 <-
list("Age" =
list("min" = ~ min(age),
"max" = ~ max(age),
"mean (sd)" = ~ qwraps2::mean_sd(age)),
"Education" =
list("No Education" = ~ qwraps2::n_perc0(educ == 'no_educ'),
"Elementary"  = ~ qwraps2::n_perc0(educ == 2),
"Middle School"  = ~ qwraps2::n_perc0(educ == 3),
"High School"  = ~ qwraps2::n_perc0(educ == 4),
"University and Above"  = ~ qwraps2::n_perc0(educ == 5))
)
summary_table(gss, our_summary1)
table(gss$educ)
our_summary1 <-
list("Age" =
list("min" = ~ min(age),
"max" = ~ max(age),
"mean (sd)" = ~ qwraps2::mean_sd(age)),
"Education" =
list("No Education" = ~ qwraps2::n_perc0(educ == 'no_educ'),
"Elementary"  = ~ qwraps2::n_perc0(educ == 'elementary'),
"Middle School"  = ~ qwraps2::n_perc0(educ == 'middle_sch'),
"High School"  = ~ qwraps2::n_perc0(educ == 'high_sch'),
"University and Above"  = ~ qwraps2::n_perc0(educ == 'uni_above'))
)
options(qwraps2_markup = "markdown")
summary_table(gss, our_summary1)
summary(gss)
library((reporttools)
)
library(reporttools)
install.packages('reporttools')
library(reporttools)
cap1 <- "Summary characteristics."
tableNominal(vars = gss, cap = cap1, vertical = FALSE, lab =
"tab: summary", longtable = FALSE)
vars1 <- gss[, c("educ", "sex", "marrige", "internet_use", "eng_listen", "eng_speak")]
vars1 <- gss[, c("educ", "sex", "marriage", "internet_use", "eng_listen", "eng_speak")]
cap1 <- "Summary characteristics."
tableNominal(vars = vars1, cap = cap1, vertical = FALSE, lab =
"tab: summary", longtable = FALSE)
summary(gss)
stargazer::stargazer(gss)
stargazer::stargazer(gss, type = 'text')
gss <- cgss %>%
select(-c(a69,a7a,a2 ,a62 ,a8a ,a8b ,
a285,a51 ,a52, a301, a302, a303))%>%
sjlabelled::remove_all_labels(efc)
gss <- cgss %>%
select(-c(a69,a7a,a2 ,a62 ,a8a ,a8b ,
a285,a51 ,a52, a301, a302, a303))%>%
sjlabelled::remove_all_labels()
stargazer::stargazer(gss, type = 'text')
vars1 <- gss[, c("sex", "educ", "marriage")]
cap1 <- "summary"
tableNominal(vars = vars1, cap = cap1, vertical = FALSE, lab =
+ "tab: nominal1", longtable = FALSE)
tableNominal(vars = vars1, cap = cap1, vertical = FALSE,
lab ="tab: nominal1", longtable = FALSE)
vars3 <- gss[, c("lg_hinc", "age", "pinc_10k")]
cap3 <- "data summary."
vars3 <- gss[, c("lg_hinc", "age", "pinc_10k")]
cap3 <- "data summary."
tableDate(vars = vars3, stats =c("n", "min", "max", "na"),
cap = cap3, lab ="tab: data1", longtable = FALSE)
tableDate(vars = vars3, stats =c("n", "min", "q1", "median", "mean", "q3", "max",
"s", "iqr","na"),
cap = cap3, lab ="tab: data1", longtable = FALSE)
tableDate(vars = vars3, stats =c("n", "min", "q1", "median", "mean", "q3", "max",
"s", "iqr","na"),
cap = cap3, lab ="tab: data1", longtable = FALSE)
tableDate(vars = vars3, stats =c("n", "min", "median", "mean",  "max", "s","na"),
cap = cap3, lab ="tab: data1", longtable = FALSE)
tableDate(vars = vars3, stats =c("n", "min", "median", "mean",  "max","na"),
cap = cap3, lab ="tab: data1", longtable = FALSE)
rm(attr(gss$age, "format.stata"))
attr(gss$age, "format.stata") < NA
attr(gss$age, "format.stata") <- NA
remove(attr(gss$age, "format.stata"))
vars3 <- gss[, c("lg_hinc", "pinc_10k")]
cap3 <- "data summary."
tableDate(vars = vars3, stats =c("n", "min", "median", "mean",  "max","na" "s"),
tableDate(vars = vars3, stats =c("n", "min", "median", "mean",  "max","na","s"),
cap = cap3, lab ="tab: data1", longtable = FALSE)
stargazer::stargazer(gss, type = 'text')
vars1 <- gss[, -c("stereotype", "age", "lg_hinc","lg_pwinc",
"hinc_10k","pinc_10k","pwinc_10k")]
vars1 <- gss%>%select(-("stereotype", "age", "lg_hinc","lg_pwinc",
vars1 <- gss[, -c("stereotype", "age", "lg_hinc","lg_pwinc",
"hinc_10k","pinc_10k")]
vars1 <- gss[, c("educ", "sex", "internet_use","eng_listen",
"eng_speak","marriage")]
cap1 <- "summary"
tableNominal(vars = vars1, cap = cap1, vertical = FALSE,
lab ="tab: nominal1", longtable = FALSE)
stargazer::stargazer(gss)
table(gss$stereotype)
gss <- gss%>%mutate(stereo = ifelse(stereotype>0, stereotype, NA))%>%
stargazer::stargazer(gss)
cgss <- data%>%
select(a421, # dependent
a69,a7a,a2 ,a62 ,a8a ,a8b ,
a285,a51 ,a52, a301, a302, a303)%>%
mutate(age = 2015 -a301)%>% # recode to age
mutate(stereotype = ifelse(a421>0, a421, NA))%>%
mutate(educ = case_when( # recode to the education
is.na(a7a) ~ NA_real_,
a7a ==1 ~ 1,
a7a>1 & a7a<4 ~ 2,
a7a ==4 ~ 3,
a7a>4 & a7a<9 ~ 4,
a7a>9 & a7a<14 ~ 5,
TRUE ~ NA_real_))%>%
mutate(educ = as.factor(educ))%>%
mutate(sex = as.factor(a2))
levels(cgss$educ) <- c('no_educ','elementary','middle_sch','high_sch','uni_above')
levels(cgss$sex) <- c('male', 'female')
# log the income
cgss <-cgss%>%mutate(lg_hinc = case_when(a62 < 0 ~ NA_real_,
a62 ==0 ~ 0,
a62 >0 ~ log(as.numeric(a62))))%>%
mutate(lg_pinc = case_when(a8a < 0 ~ NA_real_,
a8a ==0 ~ 0,
a8a >0 ~ log(as.numeric(a8a))))%>%
mutate(lg_pwinc = case_when(a8b < 0 ~ NA_real_,
a8b ==0 ~ 0,
a8b >0 ~ log(as.numeric(a8b))))
# code the personal variables
cgss <-cgss%>%mutate(internet_use = ifelse(a285>0, a285, NA))
cgss$internet_use <- as.factor(cgss$internet_use)
levels(cgss$internet_use) <-c('never', 'seldom', 'sometimes', 'often', 'very often')
cgss <-cgss%>%mutate(eng_listen = ifelse(a51>0, a51, NA))
cgss$eng_listen <- as.factor(cgss$eng_listen)
levels(cgss$eng_listen) <-c('not understand', 'poor', 'so so', 'fair', 'very good')
cgss <-cgss%>%mutate(eng_speak = ifelse(a52>0, a52, NA))
cgss$eng_speak <- as.factor(cgss$eng_speak)
levels(cgss$eng_speak) <-c('not understand', 'poor', 'so so', 'fair', 'very good')
cgss <-cgss%>%mutate(marriage = ifelse(a69>0, a69, NA))
cgss$marriage <- as.factor(cgss$marriage)
levels(cgss$marriage) <-c('unmarried', 'cohabiting', 'married_1st', 'remarried',
'seperating', 'divorced', 'widowed')
cgss <-cgss%>%mutate(hinc_10k = case_when(a62 < 0 ~ NA_real_,
a62 ==0 ~ 0,
a62 >0 ~ as.numeric(a62)/10000))%>%
mutate(pinc_10k = case_when(a8a < 0 ~ NA_real_,
a8a ==0 ~ 0,
a8a >0 ~ as.numeric(a8a)/10000))%>%
mutate(pwinc_10k = case_when(a8b < 0 ~ NA_real_,
a8b ==0 ~ 0,
a8b >0 ~ as.numeric(a8b)/10000))
gss <- cgss %>%
select(-c(a69,a7a,a2 ,a62 ,a8a ,a8b ,
a285,a51 ,a52, a301, a302, a303))%>%
sjlabelled::remove_all_labels()
gss <- cgss %>%
select(-c(a421,a69,a7a,a2 ,a62 ,a8a ,a8b ,
a285,a51 ,a52, a301, a302, a303))%>%
sjlabelled::remove_all_labels()
stargazer::stargazer(gss)
rm(list=ls())       # clear objects in memory
setwd("~/MA/2019Spring/RA/FEDAI data/Chapter 9")
library(foreign)    # package allows R to read Stata datasets
rindb <- read.dta("Rind_Bordia_JASP_1996.dta")
head(rindb)  # show a snippet of the data
Z <- as.integer(rindb$happyface) - 1   # generate a treatment indicator
Y <- rindb$tip
probs <- genprobexact(Z)
ate <- estate(Y,Z,prob=probs)
numiter <- 10000
perms <- genperms(Z,maxiter=numiter)
Ys <- genouts(Y,Z,ate=ate)            # generate a schedule of potential outcomes under the assumption that the treatment effect equals the estimated ATE for all subjects
testvar <- var(Y[Z==1]) - var(Y[Z==0])
library(ri)         # load the RI package
Z <- as.integer(rindb$happyface) - 1   # generate a treatment indicator
Y <- rindb$tip
probs <- genprobexact(Z)
ate <- estate(Y,Z,prob=probs)
numiter <- 10000
perms <- genperms(Z,maxiter=numiter)
Ys <- genouts(Y,Z,ate=ate)            # generate a schedule of potential outcomes under the assumption that the treatment effect equals the estimated ATE for all subjects
testvar <- var(Y[Z==1]) - var(Y[Z==0])
# compare variances in treatment and control groups
vardist <- rep(NA,numiter)
for (i in 1:numiter)
vardist[i] <- var(Y[perms[,i]==1]) - var(Y[perms[,i]==0])
mean(vardist >= testvar)           # p-value for var(Y1)>Var(Y0)
mean(abs(vardist) >= abs(testvar)) # p-value for var(Y1)<>Var(Y0)
Ys # schedule of Potential Outcomes
female <- as.integer(rindb$female) - 1   # generate a treatment indicators of waitstaff sex
lmmodelint <- lm(Y~Z*female)      # regression with interaction between happyface and waitstaff sex
table(female)
summary(lmmodelint)
lmmodel <- lm(Y~Z+female)    # regression model without interaction
Y0 <- Y - lmmodel$coefficients["Z"] * Z
Y1 <- Y + lmmodel$coefficients["Z"] * (1 - Z)
Y0
Y1
numiter <- 100
perms <- genperms(Z,maxiter=numiter)
Ys <- genouts(Y,Z,ate=ate)            # generate a schedule of potential outcomes under the assumption that the treatment effect equals the estimated ATE for all subjects
testvar <- var(Y[Z==1]) - var(Y[Z==0])
# compare variances in treatment and control groups
vardist <- rep(NA,numiter)
for (i in 1:numiter)
vardist[i] <- var(Y[perms[,i]==1]) - var(Y[perms[,i]==0])
mean(vardist >= testvar)           # p-value for var(Y1)>Var(Y0)
mean(abs(vardist) >= abs(testvar)) # p-value for var(Y1)<>Var(Y0)
Ys # schedule of Potential Outcomes
female <- as.integer(rindb$female) - 1   # generate a treatment indicators of waitstaff sex
lmmodelint <- lm(Y~Z*female)      # regression with interaction between happyface and waitstaff sex
summary(lmmodelint)
lmmodel <- lm(Y~Z+female)    # regression model without interaction
Y0 <- Y - lmmodel$coefficients["Z"] * Z
Y1 <- Y + lmmodel$coefficients["Z"] * (1 - Z)
f.obs <- waldtest(lmmodelint, lmmodel)$F[2]
f.sims <- rep(NA,numiter)
for (i in 1:numiter) {
Z.sim <- perms[,i]
Y.sim <- Y1 * Z.sim + Y0 * (1 - Z.sim)
# regressions based on two nested models: with and without interaction
lmmodelint.sim <- lm(Y.sim ~ Z.sim + female + female * Z.sim)
lmmodel.sim <- lm(Y.sim ~ Z.sim + female)
# calculate the F-statistic by comparing two nested models
f.sims[i] <- waldtest(lmmodelint.sim, lmmodel.sim)$F[2]
}
# calculate the p-value by comparing the observed F-statistic
# to the F-statistic under the null of constant & additive effects
mean(f.sims >= f.obs)
lmmodel <- lm(Y~Z+female)    # regression model without interaction
Y0 <- Y - lmmodel$coefficients["Z"] * Z
Y1 <- Y + lmmodel$coefficients["Z"] * (1 - Z)
f.obs <- waldtest(lmmodelint, lmmodel)$F[2]
f.obs <- lmtest::waldtest(lmmodelint, lmmodel)$F[2]
f.sims <- rep(NA,numiter)
for (i in 1:numiter) {
Z.sim <- perms[,i]
Y.sim <- Y1 * Z.sim + Y0 * (1 - Z.sim)
# regressions based on two nested models: with and without interaction
lmmodelint.sim <- lm(Y.sim ~ Z.sim + female + female * Z.sim)
lmmodel.sim <- lm(Y.sim ~ Z.sim + female)
# calculate the F-statistic by comparing two nested models
f.sims[i] <- waldtest(lmmodelint.sim, lmmodel.sim)$F[2]
}
# calculate the p-value by comparing the observed F-statistic
# to the F-statistic under the null of constant & additive effects
mean(f.sims >= f.obs)
lmmodel <- lm(Y~Z+female)    # regression model without interaction
Y0 <- Y - lmmodel$coefficients["Z"] * Z
Y1 <- Y + lmmodel$coefficients["Z"] * (1 - Z)
f.obs <- lmtest::waldtest(lmmodelint, lmmodel)$F[2]
f.obs
f.sims <- rep(NA,numiter)
for (i in 1:numiter) {
Z.sim <- perms[,i]
Y.sim <- Y1 * Z.sim + Y0 * (1 - Z.sim)
# regressions based on two nested models: with and without interaction
lmmodelint.sim <- lm(Y.sim ~ Z.sim + female + female * Z.sim)
lmmodel.sim <- lm(Y.sim ~ Z.sim + female)
# calculate the F-statistic by comparing two nested models
f.sims[i] <- waldtest(lmmodelint.sim, lmmodel.sim)$F[2]
}
# calculate the p-value by comparing the observed F-statistic
# to the F-statistic under the null of constant & additive effects
mean(f.sims >= f.obs)
for (i in 1:numiter) {
Z.sim <- perms[,i]
Y.sim <- Y1 * Z.sim + Y0 * (1 - Z.sim)
# regressions based on two nested models: with and without interaction
lmmodelint.sim <- lm(Y.sim ~ Z.sim + female + female * Z.sim)
lmmodel.sim <- lm(Y.sim ~ Z.sim + female)
# calculate the F-statistic by comparing two nested models
f.sims[i] <- lmtest::waldtest(lmmodelint.sim, lmmodel.sim)$F[2]
}
# calculate the p-value by comparing the observed F-statistic
# to the F-statistic under the null of constant & additive effects
mean(f.sims >= f.obs)
f.sims
round(flist, 3)
flist
round(f.sims, 3)
Z
Y
probs <- genprobexact(Z)
probs
ate <- estate(Y,Z,prob=probs)
ate
numiter <- 1000
perms <- genperms(Z,maxiter=numiter)
Ys <- genouts(Y,Z,ate=ate)            # generate a schedule of potential outcomes under the assumption that the treatment effect equals the estimated ATE for all subjects
female <- as.integer(rindb$female) - 1   # generate a treatment indicators of waitstaff sex
female
lmmodelint <- lm(Y~Z*female)
summary(lmmodelint)
lmmodel <- lm(Y~Z+female)
summary(lmmodel)
y0
Y0 <- Y - lmmodel$coefficients["Z"] * Z
Y1 <- Y + lmmodel$coefficients["Z"] * (1 - Z)
Y0
Y1
f.obs <- lmtest::waldtest(lmmodelint, lmmodel)$F[2]
f.obs
lmtest::waldtest(lmmodelint, lmmodel)
lmtest::waldtest(lmmodelint, lmmodel)$F[2]
lmtest::waldtest(lmmodelint, lmmodel)$F[1]
lmtest::waldtest(lmmodelint, lmmodel)
f.sims <- rep(NA,numiter)
for (i in 1:numiter) {
Z.sim <- perms[,i]
Y.sim <- Y1 * Z.sim + Y0 * (1 - Z.sim)
# regressions based on two nested models: with and without interaction
lmmodelint.sim <- lm(Y.sim ~ Z.sim + female + female * Z.sim)
lmmodel.sim <- lm(Y.sim ~ Z.sim + female)
# calculate the F-statistic by comparing two nested models
f.sims[i] <- lmtest::waldtest(lmmodelint.sim, lmmodel.sim)$F[2]
}
f.sims
round(f.sims, 2)
round(f.sims, 3)
setwd("~/MA/2019Spring/RA/FEDAI data/Chapter 9")
rm(list=ls())       # clear objects in memory
library(ri)         # load the RI package
set.seed(123908)   # random number seed, so that results are reproducible
setwd("~/16Spring/4368 Experimental/4.FEDAI replication/Chapter 9")
library(foreign)    # package allows R to read Stata datasets
rindb <- read.dta("Rind_Bordia_JASP_1996.dta")
head(rindb)  # show a snippet of the data
Z <- as.integer(rindb$happyface) - 1   # generate a treatment indicator
Y <- rindb$tip
probs <- genprobexact(Z)
ate <- estate(Y,Z,prob=probs)
numiter <- 1000
perms <- genperms(Z,maxiter=numiter)
Ys <- genouts(Y,Z,ate=ate)            # generate a schedule of potential outcomes under the assumption that the treatment effect equals the estimated ATE for all subjects
testvar <- var(Y[Z==1]) - var(Y[Z==0])
# compare variances in treatment and control groups
vardist <- rep(NA,numiter)
for (i in 1:numiter)
vardist[i] <- var(Y[perms[,i]==1]) - var(Y[perms[,i]==0])
mean(vardist >= testvar)           # p-value for var(Y1)>Var(Y0)
mean(abs(vardist) >= abs(testvar)) # p-value for var(Y1)<>Var(Y0)
Ys # schedule of Potential Outcomes
female <- as.integer(rindb$female) - 1   # generate a treatment indicators of waitstaff sex
lmmodelint <- lm(Y~Z*female)      # regression with interaction between happyface and waitstaff sex
summary(lmmodelint)
testvar
mean(female)
lmmodelint <- lm(Y~Z*female)      # regression with interaction between happyface and waitstaff sex
summary(lmmodelint)
lmmodel <- lm(Y~Z+female)    # regression model without interaction
summary(lmmodel)
Y0 <- Y - lmmodel$coefficients["Z"] * Z
Y1 <- Y + lmmodel$coefficients["Z"] * (1 - Z)
Y0
Y1
f.obs
f.obs <- lmtest::waldtest(lmmodelint, lmmodel)$F[2]
f.obs
# calculate the p-value by comparing the observed F-statistic
# to the F-statistic under the null of constant & additive effects
mean(f.sims >= f.obs)
f.obs <- lmtest::waldtest(lmmodelint, lmmodel)$F[2]
f.obs
f.sims <- rep(NA,numiter)
for (i in 1:numiter) {
Z.sim <- perms[,i]
Y.sim <- Y1 * Z.sim + Y0 * (1 - Z.sim)
# regressions based on two nested models: with and without interaction
lmmodelint.sim <- lm(Y.sim ~ Z.sim + female + female * Z.sim)
lmmodel.sim <- lm(Y.sim ~ Z.sim + female)
# calculate the F-statistic by comparing two nested models
f.sims[i] <- lmtest::waldtest(lmmodelint.sim, lmmodel.sim)$F[2]
}
# calculate the p-value by comparing the observed F-statistic
# to the F-statistic under the null of constant & additive effects
mean(f.sims >= f.obs)
f.sims
f.obs
View(perms)
probs
numiter <- 100
perms <- genperms(Z,maxiter=numiter)
Ys <- genouts(Y,Z,ate=ate)            # generate a schedule of potential outcomes under the assumption that the treatment effect equals the estimated ATE for all subjects
Ys # schedule of Potential Outcomes
Y0 <- Y - lmmodel$coefficients["Z"] * Z
Y1 <- Y + lmmodel$coefficients["Z"] * (1 - Z)
f.obs <- lmtest::waldtest(lmmodelint, lmmodel)$F[2]
f.obs
f.sims <- rep(NA,numiter)
for (i in 1:numiter) {
Z.sim <- perms[,i]
Y.sim <- Y1 * Z.sim + Y0 * (1 - Z.sim)
# regressions based on two nested models: with and without interaction
lmmodelint.sim <- lm(Y.sim ~ Z.sim + female + female * Z.sim)
lmmodel.sim <- lm(Y.sim ~ Z.sim + female)
# calculate the F-statistic by comparing two nested models
f.sims[i] <- lmtest::waldtest(lmmodelint.sim, lmmodel.sim)$F[2]
}
# calculate the p-value by comparing the observed F-statistic
# to the F-statistic under the null of constant & additive effects
mean(f.sims >= f.obs)
numiter <- 10000
perms <- genperms(Z,maxiter=numiter)
Ys <- genouts(Y,Z,ate=ate)            # generate a schedule of potential outcomes under the assumption that the treatment effect equals the estimated ATE for all subjects
female <- as.integer(rindb$female) - 1   # generate a treatment indicators of waitstaff sex
lmmodelint <- lm(Y~Z*female)      # regression with interaction between happyface and waitstaff sex
summary(lmmodelint)
lmmodel <- lm(Y~Z+female)    # regression model without interaction
Y0 <- Y - lmmodel$coefficients["Z"] * Z
Y1 <- Y + lmmodel$coefficients["Z"] * (1 - Z)
f.obs <- lmtest::waldtest(lmmodelint, lmmodel)$F[2]
f.sims <- rep(NA,numiter)
for (i in 1:numiter) {
Z.sim <- perms[,i]
Y.sim <- Y1 * Z.sim + Y0 * (1 - Z.sim)
# regressions based on two nested models: with and without interaction
lmmodelint.sim <- lm(Y.sim ~ Z.sim + female + female * Z.sim)
lmmodel.sim <- lm(Y.sim ~ Z.sim + female)
# calculate the F-statistic by comparing two nested models
f.sims[i] <- lmtest::waldtest(lmmodelint.sim, lmmodel.sim)$F[2]
}
# calculate the p-value by comparing the observed F-statistic
# to the F-statistic under the null of constant & additive effects
mean(f.sims >= f.obs)
# use estimated coefficients from base model to impute potential outcomes
Y00 <- Y - lmmodel$coefficients["Z"]*Z - lmmodel$coefficients["female"]*female
numiter <- 100000
perms <- genperms(Z,maxiter=numiter)
Ys <- genouts(Y,Z,ate=ate)            # generate a schedule of potential outcomes under the assumption that the treatment effect equals the estimated ATE for all subjects
f.sims <- rep(NA,numiter)
for (i in 1:numiter) {
Z.sim <- perms[,i]
Y.sim <- Y1 * Z.sim + Y0 * (1 - Z.sim)
# regressions based on two nested models: with and without interaction
lmmodelint.sim <- lm(Y.sim ~ Z.sim + female + female * Z.sim)
lmmodel.sim <- lm(Y.sim ~ Z.sim + female)
# calculate the F-statistic by comparing two nested models
f.sims[i] <- lmtest::waldtest(lmmodelint.sim, lmmodel.sim)$F[2]
}
# calculate the p-value by comparing the observed F-statistic
# to the F-statistic under the null of constant & additive effects
mean(f.sims >= f.obs)
sample(f.sims, replace = FALSE)
round(sample(f.sims, replace = FALSE),3)
