"hinc_10k","pinc_10k")]
vars1 <- gss[, c("educ", "sex", "internet_use","eng_listen",
"eng_speak","marriage")]
cap1 <- "summary"
tableNominal(vars = vars1, cap = cap1, vertical = FALSE,
lab ="tab: nominal1", longtable = FALSE)
stargazer::stargazer(gss)
table(gss$stereotype)
gss <- gss%>%mutate(stereo = ifelse(stereotype>0, stereotype, NA))%>%
stargazer::stargazer(gss)
cgss <- data%>%
select(a421, # dependent
a69,a7a,a2 ,a62 ,a8a ,a8b ,
a285,a51 ,a52, a301, a302, a303)%>%
mutate(age = 2015 -a301)%>% # recode to age
mutate(stereotype = ifelse(a421>0, a421, NA))%>%
mutate(educ = case_when( # recode to the education
is.na(a7a) ~ NA_real_,
a7a ==1 ~ 1,
a7a>1 & a7a<4 ~ 2,
a7a ==4 ~ 3,
a7a>4 & a7a<9 ~ 4,
a7a>9 & a7a<14 ~ 5,
TRUE ~ NA_real_))%>%
mutate(educ = as.factor(educ))%>%
mutate(sex = as.factor(a2))
levels(cgss$educ) <- c('no_educ','elementary','middle_sch','high_sch','uni_above')
levels(cgss$sex) <- c('male', 'female')
# log the income
cgss <-cgss%>%mutate(lg_hinc = case_when(a62 < 0 ~ NA_real_,
a62 ==0 ~ 0,
a62 >0 ~ log(as.numeric(a62))))%>%
mutate(lg_pinc = case_when(a8a < 0 ~ NA_real_,
a8a ==0 ~ 0,
a8a >0 ~ log(as.numeric(a8a))))%>%
mutate(lg_pwinc = case_when(a8b < 0 ~ NA_real_,
a8b ==0 ~ 0,
a8b >0 ~ log(as.numeric(a8b))))
# code the personal variables
cgss <-cgss%>%mutate(internet_use = ifelse(a285>0, a285, NA))
cgss$internet_use <- as.factor(cgss$internet_use)
levels(cgss$internet_use) <-c('never', 'seldom', 'sometimes', 'often', 'very often')
cgss <-cgss%>%mutate(eng_listen = ifelse(a51>0, a51, NA))
cgss$eng_listen <- as.factor(cgss$eng_listen)
levels(cgss$eng_listen) <-c('not understand', 'poor', 'so so', 'fair', 'very good')
cgss <-cgss%>%mutate(eng_speak = ifelse(a52>0, a52, NA))
cgss$eng_speak <- as.factor(cgss$eng_speak)
levels(cgss$eng_speak) <-c('not understand', 'poor', 'so so', 'fair', 'very good')
cgss <-cgss%>%mutate(marriage = ifelse(a69>0, a69, NA))
cgss$marriage <- as.factor(cgss$marriage)
levels(cgss$marriage) <-c('unmarried', 'cohabiting', 'married_1st', 'remarried',
'seperating', 'divorced', 'widowed')
cgss <-cgss%>%mutate(hinc_10k = case_when(a62 < 0 ~ NA_real_,
a62 ==0 ~ 0,
a62 >0 ~ as.numeric(a62)/10000))%>%
mutate(pinc_10k = case_when(a8a < 0 ~ NA_real_,
a8a ==0 ~ 0,
a8a >0 ~ as.numeric(a8a)/10000))%>%
mutate(pwinc_10k = case_when(a8b < 0 ~ NA_real_,
a8b ==0 ~ 0,
a8b >0 ~ as.numeric(a8b)/10000))
gss <- cgss %>%
select(-c(a69,a7a,a2 ,a62 ,a8a ,a8b ,
a285,a51 ,a52, a301, a302, a303))%>%
sjlabelled::remove_all_labels()
gss <- cgss %>%
select(-c(a421,a69,a7a,a2 ,a62 ,a8a ,a8b ,
a285,a51 ,a52, a301, a302, a303))%>%
sjlabelled::remove_all_labels()
stargazer::stargazer(gss)
rm(list = ls())
Y <- c(rep(1, 38), rep(0, 542-38), rep(1, 55), rep(0, 542-55),
rep(1, 46), rep(0, 541-46), rep(1, 71), rep(0, 541-71),
rep(1, 37), rep(0, 670-37), rep(1, 48), rep(0, 670-48),
rep(1, 36), rep(0, 682-36), rep(1, 61), rep(0, 682-61))
boston <- c(rep(1, 542+542+541+541), rep(0, 670+670+682+682))
chicago <- 1-boston
lowquality <- c(rep(1, 542+542), rep(0, 541+541), rep(1, 670+670), rep(0, 682+682))
highquality <- 1-lowquality
black<- c(rep(1, 542), rep(0,542), rep(1, 541), rep(0,541),
rep(1, 670), rep(0,670), rep(1, 682), rep(0,682))
white <- 1-black
fit_1 <- lm(Y ~ white + highquality + chicago + white*highquality +
white*chicago + highquality*chicago + white*highquality*chicago)
fit_2 <- lm(Y ~ black + highquality + chicago + black*highquality +
black*chicago + highquality*chicago + black*highquality*chicago)
fit_3 <- lm(Y ~ white + highquality + boston + white*highquality +
white*boston + highquality*boston + white*highquality*boston)
fit_4 <- lm(Y ~ black + lowquality + chicago + black*lowquality +
black*chicago + lowquality*chicago + black*lowquality*chicago)
stargazer::stargazer(fit_1, fit_2, fit_3, fit_4, style = "apsr", type = "text")
rm(list = ls())
remove.packages(raw)
#Clear any previous work
rm(list=ls(all=TRUE))
#Load Relevant packages
library(foreign)
#Read in Data from Internet
bedout <- read.dta("http://hdl.handle.net/10079/xksn0db")
bedout
library(ri)
?genperms
genperms
lm1$coefficients
rm(list = ls())
combn
?combn
combn(letters[1:4], 2)
combn(letters[1:4], 4)
combn(c(1,1,1,1,2,2,2,3,3,4), 3, tabulate, nbins = 4)
rm(list = ls())
remove.packages("rmdformats")
rm(list = ls())
install.packages('rmdformats')
rm(list=ls())       # clear objects in memory
library(ri)
# schedule of potential outcomes for problem 10.3
Z <- c(0,0,0,0,0,0,1,1,1,1,1,1)
Y0M0 = c(0,0,0,0,0,0,1,1,1,0,0,0)
Y1M0 = c(0,0,0,1,1,1,0,0,0,1,1,1)
Y0M1 = c(0,0,0,0,0,0,1,1,1,1,1,1)
Y1M1 = c(0,0,0,1,1,1,1,1,1,1,1,1)
M0 = c(0,0,1,0,0,1,0,0,1,0,0,1)
M1 = c(0,1,1,0,1,1,0,1,1,0,1,1)
# verify column averages
mean(Y0M0)
mean(Y1M0)
mean(Y0M1)
mean(Y1M1)
# simulate all possible random assignments
perms <- genperms(Z)
?genperms
genperms
combn
coefmat <- matrix(NA,ncol(perms),3)  # stores estimates from equation 10.3
tcoefmat <- matrix(NA,ncol(perms),2) # stores estimates from equation 10.2
mcoefmat <- matrix(NA,ncol(perms),2) # stores estimates from equation 10.1
for (i in 1:ncol(perms)) {
Zri <- perms[,i]
M <- M0*(1-Zri) + M1*Zri
Y <- Y0M0*(1-Zri)*(1-M) + Y1M0*(Zri)*(1-M) + Y0M1*(1-Zri)*(M) + Y1M1*(Zri)*(M)
coefmat[i,] <- lm(Y~M+Zri)$coefficients
tcoefmat[i,] <- lm(Y~Zri)$coefficients
mcoefmat[i,] <- lm(M~Zri)$coefficients
}
# results omit instances of perfect colinearity between M and Z
colMeans(na.omit(coefmat))  # report the avg coefficients from a regression of Y on M and Z
colMeans(na.omit(tcoefmat)) # report the avg coefficients from a regression of Y on Z
colMeans(na.omit(mcoefmat)) # report the avg coefficients from a regression of M on Z
View(coefmat)
View(coefmat)
colMeans(coefmat)
nona <- na.omit(coefmat)
View(nona)
coefmat[1:10,]
nona[1:10,]
rm(nona)
na.omit
is.na(coefmat)
library(tidyverse)
df <-as.tibble(coefmat)
na.omit(df)
df <-mutate(df, id = row_number())
dfno <- na.omit(df)
no <- anti_join(df, dfno)
View(no)
no$id
df <-as.tibble(tcoefmat)
df <-mutate(df, id = row_number())
dfno <- na.omit(df)
no <- anti_join(df, dfno)
df <-as.tibble(mcoefmat)
df <-mutate(df, id = row_number())
dfno <- na.omit(df)
View(mcoefmat)
colMeans(na.omit(mcoefmat))
df <-as.tibble(mcoefmat)
df <-mutate(df, id = row_number())
dfno <- na.omit(df)
mean(df$V1)
mean(df$V2)
View(tcoefmat)
View(coefmat)
View(mcoefmat)
head(df)
head(mcoefmat)
rm(list=ls())       # clear objects in memory
library(ri)         # load the RI package
set.seed(1234567)   # random number seed, so that results are reproducible
library(foreign)    # package allows R to read Stata datasets
setwd("/Users/donaldgreen/Dropbox/Field Experimentation Book/Final Code for Vignettes and Problems/Chapter 4/")
teach <- read.dta("Teachers data for Table 4-1.dta")
colnames(teach)
Z  <- teach$D       # treatment
Y1 <- teach$y1      # treated potential outcome
Y0 <- teach$y0      # untreated potential outcome
X <- teach$x        # pre-test
Y <- Y0*(1-Z) + Y1*(Z)    # observed outcomem given random assignment
setwd("~/MA/2019Spring/RAship/FEDAI/FEDAI data/Chapter 4")
rm(list=ls())       # clear objects in memory
library(ri)         # load the RI package
set.seed(1234567)   # random number seed, so that results are reproducible
library(foreign)    # package allows R to read Stata datasets
setwd("/Users/donaldgreen/Dropbox/Field Experimentation Book/Final Code for Vignettes and Problems/Chapter 4/")
teach <- read.dta("Teachers data for Table 4-1.dta")
colnames(teach)
Z  <- teach$D       # treatment
Y1 <- teach$y1      # treated potential outcome
Y0 <- teach$y0      # untreated potential outcome
X <- teach$x        # pre-test
Y <- Y0*(1-Z) + Y1*(Z)    # observed outcomem given random assignment
N <- length(Z)
summary(lm(Z~X))$fstatistic[1]
randfun <- function() {
teststat <- -1
while (teststat < 0.05) {
Zri <- sample(Z)
teststat <- summary(lm(Zri~X))$coefficients[2,4]   # extract the p-value from the t-test (which is the same as the F-test since there is one covariate)
}
return(Zri)
}
perms <- genperms.custom(numiter=10000,randfun=randfun)    # notice the use of the restricted randomization function in the generation of simulated random allocations
probs <- genprob(perms) # important: restricted randomization can sometimes generate unequal probabilities of assignment, so it's important to generate the probs and use inverse probability weights when estimating the ATE
weights <- (1/probs) *Z + (1/(1-probs))*(1-Z)
probs
weights <- (1/probs) *Z + (1/(1-probs))*(1-Z)
var.weights.treat <- var(weights[Z==1])
var.weights.control <- var(weights[Z==0])
var.weights.treat
var.weights.control
ate <- estate(Y,Z,prob=probs)
ate
Ys <- genouts(Y,Z,ate=0)
distout <- gendist(Ys,perms,prob=probs)
ate
dispdist(distout,ate)
mean(abs(distout) > abs(ate))
set.seed(349587923485)   # random number seed, so that results are reproducible
set.seed(34923485)   # random number seed, so that results are reproducible
perms <- genperms.custom(numiter=10000,randfun=randfun)    # notice the use of the restricted randomization function in the generation of simulated random allocations
probs <- genprob(perms) # important: restricted randomization can sometimes generate unequal probabilities of assignment, so it's important to generate the probs and use inverse probability weights when estimating the ATE
weights <- (1/probs) *Z + (1/(1-probs))*(1-Z)
var.weights.treat <- var(weights[Z==1])
var.weights.control <- var(weights[Z==0])
var.weights.treat
var.weights.control
ate <- estate(Y,Z,prob=probs)
Ys <- genouts(Y,Z,ate=0)
distout <- gendist(Ys,perms,prob=probs)
mean(abs(distout) > abs(ate))
Ys[1:10]
genouts
gendist
estate
View(teach)
hist(distout)
ateX <- estate(Y,Z,X,prob=probs)
Ys <- genouts(Y,Z,ate=0)
distout <- gendist(Ys,perms,X,prob=probs)
ateX
dispdist(distout,ateX)
typeof(perms)
perms[1,]
perms [,1]
perms[,2]
library(tidyverse)
zperm <-as_tibble(perms)
zperm <-transpose(perms)%>%as_tibble()
zperm <-base::transpose(perms)%>%as_tibble()
zperm <-t(perms)%>%as_tibble()
zperm <-t(perms)%>%as_tibble()%>%distinct()
zperm <-t(perms)%>%as_tibble()%>%distinct()
ate
lm(Y~Z,weights = probs)
lm(Y~Z,weights = weights)
ate
sample(Z)
sample(Z)
setwd("~/MA/2019Spring/RAship/FEDAI/FEDAI code STATA")
stata_check <- read.dta("4_5_z.dta")
install.packages("readstata13")
library(readstata13)
stata_check <- readstata13::read.dta13("4_5_z.dta")
stata_check<-stata_check%>%select(starts_with("z"))
stata_check<-stata_check%>%select(starts_with("z"))%>%distinct()
stata_matrix <-as.matrix(stata_check)%>%t()
stata_dup <-stata_matrix%>%as_tibble()%>%distinct()
df <- tibble(
x = sample(10, 100, rep = TRUE),
y = sample(10, 100, rep = TRUE)
)
distinct(df, x)
df <- df%>%distinct()
df <- tibble(
x = sample(10, 100, rep = TRUE),
y = sample(10, 100, rep = TRUE)
)
df <- df%>%distinct()
stata_dup <-stata_matrix%>%as_tibble()%>%distinct()
rm(list=ls())       # clear objects in memory
library(ri)         # load the RI package
set.seed(34923485)   # random number seed, so that results are reproducible
library(foreign)    # package allows R to read Stata datasets
teach <- read.dta("Teachers data for Table 4-1.dta")
colnames(teach)
Z  <- teach$D       # treatment
Y1 <- teach$y1      # treated potential outcome
Y0 <- teach$y0      # untreated potential outcome
X <- teach$x        # pre-test
Y <- Y0*(1-Z) + Y1*(Z)    # observed outcomem given random assignment
N <- length(Z)
summary(lm(Z~X))$fstatistic[1]
randfun <- function() {
teststat <- -1
while (teststat < 0.05) {
Zri <- sample(Z)
teststat <- summary(lm(Zri~X))$coefficients[2,4]   # extract the p-value from the t-test (which is the same as the F-test since there is one covariate)
}
return(Zri)
}
perms <- genperms.custom(numiter=20000,randfun=randfun)    # notice the use of the restricted randomization function in the generation of simulated random allocations
probs <- genprob(perms) # important: restricted randomization can sometimes generate unequal probabilities of assignment, so it's important to generate the probs and use inverse probability weights when estimating the ATE
probs
weights <- (1/probs) *Z + (1/(1-probs))*(1-Z)
weights
var.weights.treat <- var(weights[Z==1])
var.weights.control <- var(weights[Z==0])
var.weights.treat
var.weights.control
ate <- estate(Y,Z,prob=probs)
ate
Ys <- genouts(Y,Z,ate=0)
Ys
distout <- gendist(Ys,perms,prob=probs)
mean(abs(distout) > abs(ate))
mean(distout)
abs(distout) > abs(ate)
sum(abs(distout) > abs(ate))
f_sim <-rep(NA, 20000)
perm[1,:]
perm[1,]
perms[1,]
perms[,1]
for (i in 1:20000){
f_sim[i]<-summary(lm(perms[,i]~X))$coefficients[2,4]
}
sort(f_sim)
f_sims<-sort(f_sim)
f_sims[1]
mean(abs(distout) > abs(ate))
zperm <-t(perms)%>%as_tibble()%>%distinct()
df <- tibble(
x = sample(10, 100, rep = TRUE),
y = sample(10, 100, rep = TRUE)
)
nrow(distinct(df))
nrow(distinct(df, x, y))
nrow(distinct(df, x))
nrow(distinct(df, x,y))
rm(df)
ateX <- estate(Y,Z,X,prob=probs)
Ys <- genouts(Y,Z,ate=0)
distout <- gendist(Ys,perms,X,prob=probs)
ateX
dispdist(distout,ateX)
estate
ateX
dispdist(distout,ateX)
genperms.custom
set.seed(374892)   # random number seed, so that results are reproducible
summary(lm(Z~X))$fstatistic[1]
summary(lm(D~X))$coefficients[2,4]
summary(lm(D~X))
lm(D~X)
summary(lm(D~X))$coefficients[2,4]
summary(lm(Z~X))$coefficients[2,4]
summary(lm(Zri~X))
summary(lm(Z~X))
rm(list=ls())       # clear objects in memory
library(ri)         # load the RI package
set.seed(374892)   # random number seed, so that results are reproducible
library(foreign)    # package allows R to read Stata datasets
teach <- read.dta("Teachers data for Table 4-1.dta")
colnames(teach)
Z  <- teach$D       # treatment
Y1 <- teach$y1      # treated potential outcome
Y0 <- teach$y0      # untreated potential outcome
X <- teach$x        # pre-test
Y <- Y0*(1-Z) + Y1*(Z)    # observed outcomem given random assignment
N <- length(Z)
summary(lm(Z~X))$fstatistic[1]
randfun <- function() {
teststat <- -1
while (teststat < 0.05) {
Zri <- sample(Z)
teststat <- summary(lm(Zri~X))$coefficients[2,4]
# extract the p-value from the t-test
# (which is the same as the F-test since there is one covariate)
}
return(Zri)
}
# f_sim <-rep(NA, 20000)
# for (i in 1:20000){
#         f_sim[i]<-summary(lm(perms[,i]~X))$coefficients[2,4]
# }
# f_sims<-sort(f_sim)
# notice the use of the restricted randomization function
# in the generation of simulated random allocations
perms <- genperms.custom(numiter=10000,randfun=randfun)
# f_sim <-rep(NA, 20000)
# for (i in 1:20000){
#         f_sim[i]<-summary(lm(perms[,i]~X))$coefficients[2,4]
# }
# f_sims<-sort(f_sim)
# notice the use of the restricted randomization function
# in the generation of simulated random allocations
perms <- genperms.custom(numiter=1000,randfun=randfun)
# f_sim <-rep(NA, 20000)
# for (i in 1:20000){
#         f_sim[i]<-summary(lm(perms[,i]~X))$coefficients[2,4]
# }
# f_sims<-sort(f_sim)
# notice the use of the restricted randomization function
# in the generation of simulated random allocations
perms <- genperms.custom(numiter=1000,randfun=randfun)
probs <- genprob(perms) # important: restricted randomization can sometimes generate unequal probabilities of assignment, so it's important to generate the probs and use inverse probability weights when estimating the ATE
weights <- (1/probs) *Z + (1/(1-probs))*(1-Z)
var.weights.treat <- var(weights[Z==1])
var.weights.control <- var(weights[Z==0])
var.weights.treat
var.weights.control
ate <- estate(Y,Z,prob=probs)
ate
Ys <- genouts(Y,Z,ate=0)
distout <- gendist(Ys,perms,prob=probs)
sum(abs(distout) > abs(ate))
mean(abs(distout) > abs(ate))
lm(Y~Z,weights = weights)
ate
dispdist(distout,ate)
ateX <- estate(Y,Z,X,prob=probs)
Ys <- genouts(Y,Z,ate=0)
distout <- gendist(Ys,perms,X,prob=probs)
ateX
dispdist(distout,ateX)
mean(abs(distout) > abs(ateX))
f_sim <-rep(NA, 1000)
for (i in 1:1000){
f_sim[i]<-summary(lm(perms[,i]~X))$coefficients[2,4]
}
f_sims<-sort(f_sim)
f_sims[1]
rm(list=ls())       # clear objects in memory
library(ri)         # load the RI package
set.seed(1234567)   # random number seed, so that results are reproducible
library(foreign)    # package allows R to read Stata datasets
teach <- read.dta("Teachers data for Table 4-1.dta")
colnames(teach)
Z  <- teach$D       # treatment
Y1 <- teach$y1      # treated potential outcome
Y0 <- teach$y0      # untreated potential outcome
X <- teach$x        # pre-test
Y <- Y0*(1-Z) + Y1*(Z)    # observed outcomem given random assignment
N <- length(Z)
summary(lm(Z~X))$fstatistic[1]
randfun <- function() {
teststat <- -1
while (teststat < 0.05) {
Zri <- sample(Z)
teststat <- summary(lm(Zri~X))$coefficients[2,4]
# extract the p-value from the t-test
# (which is the same as the F-test since there is one covariate)
}
return(Zri)
}
f_sim <-rep(NA, 1000)
for (i in 1:1000){
f_sim[i]<-summary(lm(perms[,i]~X))$coefficients[2,4]
}
f_sims<-sort(f_sim)
f_sims[1]
# notice the use of the restricted randomization function
# in the generation of simulated random allocations
perms <- genperms.custom(numiter=1000,randfun=randfun)
f_sim <-rep(NA, 1000)
for (i in 1:1000){
f_sim[i]<-summary(lm(perms[,i]~X))$coefficients[2,4]
}
f_sims<-sort(f_sim)
f_sims[1]
probs <- genprob(perms) # important: restricted randomization can sometimes generate unequal probabilities of assignment, so it's important to generate the probs and use inverse probability weights when estimating the ATE
weights <- (1/probs) *Z + (1/(1-probs))*(1-Z)
var.weights.treat
var.weights.treat <- var(weights[Z==1])
var.weights.control <- var(weights[Z==0])
var.weights.treat
var.weights.control
ate <- estate(Y,Z,prob=probs)
Ys <- genouts(Y,Z,ate=0)
distout <- gendist(Ys,perms,prob=probs)
sum(abs(distout) > abs(ate))
mean(abs(distout) > abs(ate))
lm(Y~Z,weights = weights)
ate
dispdist(distout,ate)
ateX <- estate(Y,Z,X,prob=probs)
Ys <- genouts(Y,Z,ate=0)
distout <- gendist(Ys,perms,X,prob=probs)
ateX
dispdist(distout,ateX)
mean(abs(distout) > abs(ateX))
hist(f_sims)
