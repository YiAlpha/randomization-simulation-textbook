### Artificial example to illustrate tree models
### Using R 2.13.0
library(tree)
library(BayesTree)
install.packages('tree')
install.packages('BayesTree')
### Artificial example to illustrate tree models
### Using R 2.13.0
library(tree)
install.packages('BART')
### Artificial example to illustrate tree models
### Using R 2.13.0
library(tree)
rm(list = ls(all = TRUE))
set.seed(153)
n <- 200
Tr <- rbinom(n,1,.5)
x <- rnorm(n,4,1)
y0 <- rnorm(n,x^2,4)
y1 <- y0 + Tr*x^2 + rnorm(n,0,2)
y <- y0
y[Tr==1] <- y1[Tr==1]
dat <- data.frame(y,Tr,x)
temp <- lm(y ~ Tr*x, data = dat, x = TRUE, model = TRUE)
summary(temp)
# true response surfaces
y0.true <- matrix(NA,1000,2)
y0.true[,1] <- seq(from = min(x), to = max(x), length.out = 1000)
y0.true[,2] <- y0.true[,1]^2
y1.true <- matrix(NA,1000,2)
y1.true[,1] <- seq(from = min(x), to = max(x), length.out = 1000)
y1.true[,2] <- y0.true[,2] + y1.true[,1]^2
# OLS fit
dat <- data.frame(0, seq(from = min(x), to = max(x), length.out = 1000))
colnames(dat) <- c("Tr","x")
pred <- predict(temp, newdata = dat)
dat <- data.frame(1, seq(from = min(x), to = max(x), length.out = 1000))
colnames(dat) <- c("Tr","x")
pred <- predict(temp, newdata = dat)
# BART fit
temp.X <- data.frame(Tr,x)
temp.S <- data.frame(c(rep(1,n),rep(0,n)), c(sort(x),sort(x)))
colnames(temp.S) <- colnames(temp.X)
out.bart <- bart(x.train = temp.X, y.train = y, ndpost = 1000, nskip = 1000, keepevery = 1,
ntree = 200,
usequants = TRUE, keeptrainfits = FALSE, x.test = temp.S)
library(BART)
out.bart <- bart(x.train = temp.X, y.train = y, ndpost = 1000, nskip = 1000, keepevery = 1,
ntree = 200,
usequants = TRUE, keeptrainfits = FALSE, x.test = temp.S)
install.packages('tree')
install.packages(c("BayesTree", "tree"))
### Artificial example to illustrate tree models
### Using R 2.13.0
library(tree)
library(BayesTree)
rm(list = ls(all = TRUE))
set.seed(153)
n <- 200
Tr <- rbinom(n,1,.5)
x <- rnorm(n,4,1)
y0 <- rnorm(n,x^2,4)
y1 <- y0 + Tr*x^2 + rnorm(n,0,2)
y <- y0
y[Tr==1] <- y1[Tr==1]
dat <- data.frame(y,Tr,x)
temp <- lm(y ~ Tr*x, data = dat, x = TRUE, model = TRUE)
summary(temp)
# true response surfaces
y0.true <- matrix(NA,1000,2)
y0.true[,1] <- seq(from = min(x), to = max(x), length.out = 1000)
y0.true[,2] <- y0.true[,1]^2
y1.true <- matrix(NA,1000,2)
y1.true[,1] <- seq(from = min(x), to = max(x), length.out = 1000)
y1.true[,2] <- y0.true[,2] + y1.true[,1]^2
# OLS fit
dat <- data.frame(0, seq(from = min(x), to = max(x), length.out = 1000))
colnames(dat) <- c("Tr","x")
pred <- predict(temp, newdata = dat)
dat <- data.frame(1, seq(from = min(x), to = max(x), length.out = 1000))
colnames(dat) <- c("Tr","x")
pred <- predict(temp, newdata = dat)
# BART fit
temp.X <- data.frame(Tr,x)
temp.S <- data.frame(c(rep(1,n),rep(0,n)), c(sort(x),sort(x)))
colnames(temp.S) <- colnames(temp.X)
out.bart <- bart(x.train = temp.X, y.train = y, ndpost = 1000, nskip = 1000, keepevery = 1,
ntree = 200,
usequants = TRUE, keeptrainfits = FALSE, x.test = temp.S)
cat(dim(out.bart$yhat.test), "\n")
out.bart0 <- out.bart
out.bart1 <- out.bart
out.bart1$yhat.test <- out.bart$yhat.test[,1:(ncol(out.bart$yhat.test)/2)]
out.bart0$yhat.test <- out.bart$yhat.test[,((ncol(out.bart$yhat.test)/2)+1):ncol(out.bart$yhat.test)]
out <- matrix(NA,n,3)
out[,1] <- sort(x)
colnames(out) <- c("x value", "Y0", "Y1")
for(i in 1:n)   {
out[i,2] <- mean(out.bart0$yhat.test[,i])
out[i,3] <- mean(out.bart1$yhat.test[,i])
}
# Add single tree fit
temp.tree <- tree(y ~ Tr + x, mincut = 25)
summary(temp.tree)
plot(temp.tree)
temp.tree
# plot
plot(x[Tr == 0], y[Tr == 0], ylim = range(y), xlim = range(x), ylab = "Y", xlab = "X", pch = 21,
bg = "white", cex = 1)
points(x[Tr == 1], y[Tr == 1], col = "black", pch = 24, bg = "white", cex = .8)
lines(x = y0.true[,1], y = y0.true[,2], lty = 1, lwd = 2)
lines(x = y1.true[,1], y = y1.true[,2], lty = 1, lwd = 2)
lines(x = out[,1], y = out[,2], lty = 2, lwd = 2, col = "red")
lines(x = out[,1], y = out[,3], lty = 2, lwd = 2, col = "red")
dat <- data.frame(0, seq(from = min(x), to = max(x), length.out = 1000))
colnames(dat) <- c("Tr","x")
pred <- predict.tree(temp.tree, newdata = dat)
lines(x = y1.true[,1], y = pred, lty = 3, lwd = 2, col = "blue")
dat <- data.frame(1, seq(from = min(x), to = max(x), length.out = 1000))
colnames(dat) <- c("Tr","x")
pred <- predict.tree(temp.tree, newdata = dat)
lines(x = y1.true[,1], y = pred, lty = 3, lwd = 2, col = "blue")
# add legend
lines(  x = seq(from = 2, to = 2.3, length.out = 10),
y = rep(75,10), lty = 1, lwd = 2)
text(x = 2.3, y = 75, "True response curve", pos = 4, cex = .8)
lines(  x = seq(from = 2, to = 2.3, length.out = 10),
y = rep(70,10), lty = 2, lwd = 2, col = "red")
text(x = 2.3, y = 70, "BART fit", pos = 4, cex = .8)
lines(  x = seq(from = 2, to = 2.3, length.out = 10),
y = rep(65,10), lty = 3, lwd = 2, col = "blue")
text(x = 2.3, y = 65, "Single tree fit", pos = 4, cex = .8)
points(x = 2, y = 55, col = "black", pch = 21, bg = "white", cex = 1)
text(x = 2, y = 55, "Control obs", pos = 4, cex = .8)
points(x = 2, y = 60, col = "black", pch = 24, bg = "white", cex = .8)
text(x = 2, y = 60, "Treated obs", pos = 4, cex = .8)
install.packages(c("bartMachine", "dplyr", "ggplot2", "jpeg", "kableExtra", "knitr", "png", "stargazer"))
knitr::opts_chunk$set(echo = FALSE)
library(BayesTree)
library(bartMachine)
install.packages('rjava')
install.packages('rJava')
library(BayesTree)
library(bartMachine)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_141.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(rJava)
uninstall.packages('rJava')
remove.packages('rJava')
rm(list = ls())
library(BayesTree)
library(bartMachine)
library(dplyr)
library(stargazer)
library(kableExtra)
library(ggplot2)
library(grid)
library(stargazer)
library(png)
library(jpeg)
install.packages(c("devtools", "readstata13"))
install.packages("tidyverse")
library(bartMachine)
library(foreign)
library(haven)
library(tidyverse)
a
a
a
library(bartMachine)
library(foreign)
library(haven)
library(tidyverse)
set.seed(2184)
baird <- read_dta("./baird_dataverse_files/CorC_Public_Data_FINAL_DEIDENTIFIED.dta")
baird <- plyr::rename(baird, c("_Iage_R1_14" = "Iage_R1_14", "_Iage_R1_15" = "Iage_R1_15", "_Iage_R1_16" = "Iage_R1_16", "_Iage_R1_17" = "Iage_R1_17", "_Iage_R1_18" = "Iage_R1_18", "_Iage_R1_19" = "Iage_R1_19", "_Iage_R1_20" = "Iage_R1_20"))
baird$ever_married <- as.numeric(haven::as_factor(baird$ever_married))
baird$Z <- ifelse(baird$C2 == 1, 0, ifelse(baird$T2a == 1, 1, ifelse(baird$T2b == 1, 2, NA)))
var(baird$frac_attend_term1_2009[baird$Z == 2], na.rm = T)
var(baird$frac_attend_term1_2009[baird$Z == 1], na.rm = T)
var(baird$frac_attend_term1_2009[baird$Z == 0], na.rm = T)
baird_term1_2009 <- baird[!is.na(baird$frac_attend_term1_2009), ]
# Removing other outcome variables
baird_term1_2009 <- baird_term1_2009 %>%
select(c(round, education_score_exists, eng_pilot, math_pilot, father_alive, mother_alive, ever_preg_r1, never_had_sex, mobile, asset_index, hhsize, female_headed, hh_amount, individual_amount, ea_status, eaid, age_R1, Iage_R1_14, Iage_R1_15, Iage_R1_16, Iage_R1_17, Iage_R1_17, Iage_R1_18, Iage_R1_19, Iage_R1_20, stratum1, stratum2, highest_grade_baseline, asset_index_baseline, never_had_sex_baseline, wgt, wgt_SSR3, total_amount, Z, frac_attend_term1_2009))
baird_term1_2009 <- plyr::rename(baird_term1_2009, c("never_had_sex" = "Never had Sex", "age_R1" = "Age", "individual_amount" = "Amount Girl Received", "hh_amount" = "Amount Household Received"))
# Training and testing data
n_term1_2009 = nrow(baird_term1_2009)
trainIndex_term1_2009 = sample(1:n_term1_2009, size = (0.75*n_term1_2009), replace = FALSE)
baird_term1_2009_train = baird_term1_2009[trainIndex_term1_2009, ]
baird_term1_2009_test = baird_term1_2009[-trainIndex_term1_2009, ]
baird_term1_2009_train <- as.data.frame(baird_term1_2009_train)
baird_term1_2009_test <- as.data.frame(baird_term1_2009_test)
# bartMachine
suppressMessages(stopifnot(require(bartMachine)))
set_bart_machine_num_cores(4)
frac_term1_2009 <- bartMachine(baird_term1_2009_train[, names(baird_term1_2009_train) != "frac_attend_term1_2009"], baird_term1_2009_train$frac_attend_term1_2009,
use_missing_data = TRUE,
use_missing_data_dummies_as_covars = TRUE,
mem_cache_for_speed = FALSE,
serialize = TRUE)
frac_term1_2009_predict <- bart_predict_for_test_data(frac_term1_2009, baird_term1_2009_test[, names(baird_term1_2009_test) != "frac_attend_term1_2009"], baird_term1_2009_test$frac_attend_term1_2009)
# K-Fold cross-validation
frac_term1_2009_cv <- k_fold_cv(baird_term1_2009_train[,  names(baird_term1_2009_train) != "frac_attend_term1_2009"],
baird_term1_2009_train$frac_attend_term1_2009,
use_missing_data = TRUE,
use_missing_data_dummies_as_covars = TRUE,
k_folds = 10,
serialize = TRUE)
knitr::opts_chunk$set(fig.path="figs/",
cache.path="cache/",
cache=TRUE)
library(bartMachine)
library(foreign)
library(haven)
library(tidyverse)
set.seed(2184)
png("./figs/term1_2009_sex.png")
pd_plot(frac_term1_2009, "Never had Sex")
pd_plot(frac_term1_2009, "Never had Sex")
dev.off()
png("./figs/term1_2009_age.png")
pd_plot(frac_term1_2009, "Age")
pd_plot(frac_term1_2009, "Age")
dev.off()
getwd()
png("./figs/term1_2009_sex.png")
pd_plot(frac_term1_2009, "Never had Sex")
dev.off()
pd_plot(frac_term1_2009, "Never had Sex")
pd_plot(frac_term1_2009, "Never had Sex")
png("./figs/term1_2009_age.png")
png("./figs/term1_2009_individual.png")
png("./figs/term1_2009_hh.png")
pd_plot(frac_term1_2009, "Amount Household Received")
dev.off()
par(mar = c(0, 0, 0, 0))
vs <- var_selection_by_permute(frac_term1_2009,
num_permute_samples = 10)
vs$important_vars_local_names
vs$important_vars_global_max_names
vs$important_vars_global_se_names
par(mar = c(0, 0, 0, 0))
vs <- var_selection_by_permute(frac_term1_2009,
num_permute_samples = 10)
var_selection_by_permute_response_cv(frac_term1_2009)$best_method
vs <- var_selection_by_permute(frac_term1_2009,
num_permute_samples = 10)
dev.off()
par(mar = c(0, 0, 0, 0))
vs <- var_selection_by_permute(frac_term1_2009,
num_permute_samples = 10)
